// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.android.communication.chat.implementation;

import com.azure.android.communication.chat.models.ChatThread;
import com.azure.android.communication.chat.models.ChatThreadInfo;
import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;
import com.azure.android.communication.chat.models.CommunicationErrorResponseException;
import com.azure.android.communication.chat.models.CreateChatThreadRequest;
import com.azure.android.communication.chat.models.CreateChatThreadResult;
import com.azure.android.core.http.Callback;
import com.azure.android.core.http.Response;
import com.azure.android.core.http.exception.HttpResponseException;
import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;
import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;
import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;
import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;
import com.azure.android.core.internal.util.serializer.SerializerFormat;
import com.azure.android.core.util.paging.Page;
import com.azure.android.core.util.paging.PagedDataCollection;
import com.azure.android.core.util.paging.PagedDataRetriever;

import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import org.threeten.bp.OffsetDateTime;

import java.util.UUID;

import retrofit2.Call;
import retrofit2.http.Body;
import retrofit2.http.DELETE;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;

/**
 * An instance of this class provides access to all the operations defined in
 * Chats.
 */
public final class ChatsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ChatsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureCommunicationChatServiceImpl client;

    /**
     * Initializes an instance of ChatsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ChatsImpl(AzureCommunicationChatServiceImpl client) {
        this.client = client;
        this.service = this.client.getServiceClient().getRetrofit().create(ChatsService.class);
    }

    /**
     * The interface defining all the services for
     * AzureCommunicationChatServiceChats to be used by the proxy service to
     * perform REST calls.
     */
    private interface ChatsService {
        @POST("/chat/threads")
        Call<ResponseBody> createChatThread(@Header("repeatability-Request-ID") String repeatabilityRequestID, @Header("Accept") String accept, @Query("api-version") String apiVersion, @Body RequestBody createChatThreadRequest);

        @GET("/chat/threads")
        Call<ResponseBody> listChatThreads(@Header("Accept") String accept, @Query("maxPageSize") Integer maxPageSize, @Query("startTime") OffsetDateTime startTime, @Query("api-version") String apiVersion);

        @GET("/chat/threads/{chatThreadId}")
        Call<ResponseBody> getChatThread(@Header("Accept") String accept, @Path("chatThreadId") String chatThreadId, @Query("api-version") String apiVersion);

        @DELETE("/chat/threads/{chatThreadId}")
        Call<ResponseBody> deleteChatThread(@Header("Accept") String accept, @Path("chatThreadId") String chatThreadId, @Query("api-version") String apiVersion);

        @GET("{nextLink}")
        Call<ResponseBody> listChatThreadsNext(@Header("Accept") String accept, @Path(value = "nextLink", encoded = true) String nextLink);
    }

    /**
     * Creates a chat thread.
     *
     * @param createChatThreadRequest Request payload for creating a chat thread.
     * @param repeatabilityRequestID If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-ID and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-ID is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void createChatThread(CreateChatThreadRequest createChatThreadRequest, String repeatabilityRequestID, final Callback<CreateChatThreadResult> callback) {
        final String accept = "application/json";
        final okhttp3.RequestBody okHttp3RequestBody;
        if (repeatabilityRequestID == null)
            repeatabilityRequestID = UUID.randomUUID().toString();
        try {
            okHttp3RequestBody = RequestBody.create(okhttp3.MediaType.get("application/json"), client.serializerAdapter.serialize(createChatThreadRequest, client.resolveSerializerFormat("application/json")));
        } catch(java.io.IOException ioe) {
            callback.onFailure(new RuntimeException(ioe), null);
            return;
        }
        Call<ResponseBody> call = service.createChatThread(repeatabilityRequestID, accept, this.client.getApiVersion(), okHttp3RequestBody);
        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {
                if (response.isSuccessful()) {
                    if (response.code() == 201) {
                        final CreateChatThreadResult decodedResult;
                        try {
                            decodedResult = client.deserializeContent(response.headers(), response.body(), CreateChatThreadResult.class);
                        } catch(Exception ex) {
                            callback.onFailure(ex, response.raw());
                            return;
                        }
                        callback.onSuccess(decodedResult, response.raw());
                    } else {
                        final String strContent = client.readAsString(response.body());
                        callback.onFailure(new CommunicationErrorResponseException(strContent, response.raw()), response.raw());
                    }
                } else {
                    final String strContent = client.readAsString(response.errorBody());
                    callback.onFailure(new HttpResponseException(strContent, response.raw()), response.raw());
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                callback.onFailure(t, null);
            }
        };
        call.enqueue(retrofitCallback);
    }

    /**
     * Creates a chat thread.
     *
     * @param createChatThreadRequest Request payload for creating a chat thread.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void createChatThread(CreateChatThreadRequest createChatThreadRequest, final Callback<CreateChatThreadResult> callback) {
        final String repeatabilityRequestID = UUID.randomUUID().toString();
        createChatThread(createChatThreadRequest, repeatabilityRequestID, callback);
    }

    /**
     * Creates a chat thread.
     *
     * @param createChatThreadRequest Request payload for creating a chat thread.
     * @param repeatabilityRequestID If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-ID and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-ID is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the create chat thread operation.
     */
    public Response<CreateChatThreadResult> createChatThreadWithRestResponse(CreateChatThreadRequest createChatThreadRequest, String repeatabilityRequestID) {
        final String accept = "application/json";
        final okhttp3.RequestBody okHttp3RequestBody;
        if (repeatabilityRequestID == null)
            repeatabilityRequestID = UUID.randomUUID().toString();
        try {
            okHttp3RequestBody = RequestBody.create(okhttp3.MediaType.get("application/json"), this.client.serializerAdapter.serialize(createChatThreadRequest, this.client.resolveSerializerFormat("application/json")));
        } catch(java.io.IOException ioe) {
            throw new RuntimeException(ioe);
        }
        final retrofit2.Response<ResponseBody> response = this.client.executeRetrofitCall(service.createChatThread(repeatabilityRequestID, accept, this.client.getApiVersion(), okHttp3RequestBody));
        if (response.isSuccessful()) {
            if (response.code() == 201) {
                return new Response<>(response.raw().request(),
                                        response.code(),
                                        response.headers(),
                                        this.client.deserializeContent(response.headers(), response.body(), CreateChatThreadResult.class));
            } else {
                final String strContent = this.client.readAsString(response.body());
                throw new CommunicationErrorResponseException(strContent, response.raw());
            }
        } else {
            final String strContent = this.client.readAsString(response.errorBody());
            throw new HttpResponseException(strContent, response.raw());
        }
    }

    /**
     * Creates a chat thread.
     *
     * @param createChatThreadRequest Request payload for creating a chat thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the create chat thread operation.
     */
    public CreateChatThreadResult createChatThread(CreateChatThreadRequest createChatThreadRequest) {
        final String repeatabilityRequestID = UUID.randomUUID().toString();;
        return createChatThreadWithRestResponse(createChatThreadRequest, repeatabilityRequestID).getValue();
    }

    /**
     * Gets the list of chat threads of a user.
     *
     * @param maxPageSize The maximum number of chat threads returned per page.
     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void listChatThreads(Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatThreadInfo>> callback) {
        final String accept = "application/json";
        Call<ResponseBody> call = service.listChatThreads(accept, maxPageSize, startTime, this.client.getApiVersion());
        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {
                if (response.isSuccessful()) {
                    if (response.code() == 200) {
                        final ChatThreadsInfoCollection decodedResult;
                        try {
                            decodedResult = client.deserializeContent(response.headers(), response.body(), ChatThreadsInfoCollection.class);
                        } catch(Exception ex) {
                            callback.onFailure(ex, response.raw());
                            return;
                        }
                        callback.onSuccess(new Page<ChatThreadInfo>(response.raw().request().url().toString(), decodedResult.getValue(), decodedResult.getNextLink()), response.raw());
                    } else {
                        final String strContent = client.readAsString(response.body());
                        callback.onFailure(new CommunicationErrorResponseException(strContent, response.raw()), response.raw());
                    }
                } else {
                    final String strContent = client.readAsString(response.errorBody());
                    callback.onFailure(new HttpResponseException(strContent, response.raw()), response.raw());
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                callback.onFailure(t, null);
            }
        };
        call.enqueue(retrofitCallback);
    }

    /**
     * Gets the list of chat threads of a user.
     *
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void listChatThreads(final Callback<Page<ChatThreadInfo>> callback) {
        final Integer maxPageSize = null;
        final OffsetDateTime startTime = null;
        listChatThreads(maxPageSize, startTime, callback);
    }

    /**
     * Gets the list of chat threads of a user.
     *
     * @param maxPageSize The maximum number of chat threads returned per page.
     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of chat threads of a user.
     */
    public Response<Page<ChatThreadInfo>> listChatThreadsWithRestResponse(Integer maxPageSize, OffsetDateTime startTime) {
        final String accept = "application/json";
        final retrofit2.Response<ResponseBody> response = this.client.executeRetrofitCall(service.listChatThreads(accept, maxPageSize, startTime, this.client.getApiVersion()));
        if (response.isSuccessful()) {
            if (response.code() == 200) {
                final ChatThreadsInfoCollection decodedResult;
                try {
                    decodedResult = this.client.deserializeContent(response.headers(), response.body(), ChatThreadsInfoCollection.class);
                } catch(Exception ex) {
                    final String strContent = this.client.readAsString(response.body());
                    throw new CommunicationErrorResponseException(strContent, response.raw());
                }
                return new Response<>(response.raw().request(),
                                        response.code(),
                                        response.headers(),
                                        new Page<ChatThreadInfo>(response.raw().request().url().toString(), decodedResult.getValue(), decodedResult.getNextLink()));
            } else {
                final String strContent = this.client.readAsString(response.body());
                throw new CommunicationErrorResponseException(strContent, response.raw());
            }
        } else {
            final String strContent = this.client.readAsString(response.errorBody());
            throw new HttpResponseException(strContent, response.raw());
        }
    }

    private static final class ListChatThreadsWithPageResponseRetriever extends PagedDataResponseRetriever<ChatThreadInfo, Page<ChatThreadInfo>> {
        private final Integer maxPageSize;

        private final OffsetDateTime startTime;

        private final ChatsImpl serviceClient;

        public ListChatThreadsWithPageResponseRetriever(Integer maxPageSize, OffsetDateTime startTime, ChatsImpl serviceClient) {
            this.maxPageSize = maxPageSize;
            this.startTime = startTime;
            this.serviceClient = serviceClient;
        }

        public Response<Page<ChatThreadInfo>> getFirstPage() {
             return serviceClient.listChatThreadsWithRestResponse(maxPageSize, startTime);
        }

        public Response<Page<ChatThreadInfo>> getPage(String nextLink) {
             return serviceClient.listChatThreadsNextWithRestResponse(nextLink);
        }
    }

    private static final class ChatThreadInfoPageResponseRetriever extends PagedDataResponseRetriever<ChatThreadInfo, Page<ChatThreadInfo>> {
        private final Integer maxPageSize;

        private final OffsetDateTime startTime;

        private final ChatsImpl serviceClient;

        public ChatThreadInfoPageResponseRetriever(Integer maxPageSize, OffsetDateTime startTime, ChatsImpl serviceClient) {
            this.maxPageSize = maxPageSize;
            this.startTime = startTime;
            this.serviceClient = serviceClient;
        }

        public Response<Page<ChatThreadInfo>> getFirstPage() {
            return serviceClient.listChatThreadsWithRestResponse(maxPageSize, startTime);
        }

        public Response<Page<ChatThreadInfo>> getPage(String nextLink) {
            return serviceClient.listChatThreadsNextWithRestResponse(nextLink);
        }
    }

    /**
     * Gets the list of chat threads of a user.
     *
     * @param maxPageSize The maximum number of chat threads returned per page.
     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of chat threads of a user.
     */
    public PagedDataResponseCollection<ChatThreadInfo, Page<ChatThreadInfo>> listChatThreadsWithPageResponse(Integer maxPageSize, OffsetDateTime startTime) {
        ChatThreadInfoPageResponseRetriever retriever = new ChatThreadInfoPageResponseRetriever(maxPageSize, startTime, this);
        return new PagedDataResponseCollection<ChatThreadInfo, Page<ChatThreadInfo>>(retriever);
    }

    private static final class ChatThreadInfoPageRetriever extends PagedDataRetriever<ChatThreadInfo, Page<ChatThreadInfo>> {
        private final Integer maxPageSize;

        private final OffsetDateTime startTime;

        private final ChatsImpl serviceClient;

        public ChatThreadInfoPageRetriever(Integer maxPageSize, OffsetDateTime startTime, ChatsImpl serviceClient) {
            this.maxPageSize = maxPageSize;
            this.startTime = startTime;
            this.serviceClient = serviceClient;
        }

        public Page<ChatThreadInfo> getFirstPage() {
             return serviceClient.listChatThreadsWithRestResponse(maxPageSize, startTime).getValue();
        }

        public Page<ChatThreadInfo> getPage(String nextLink) {
             return serviceClient.listChatThreadsNextWithRestResponse(nextLink).getValue();
        }
    }

    /**
     * Gets the list of chat threads of a user.
     *
     * @param maxPageSize The maximum number of chat threads returned per page.
     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of chat threads of a user.
     */
    public PagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>> listChatThreadsWithPage(Integer maxPageSize, OffsetDateTime startTime) {
        ChatThreadInfoPageRetriever retriever = new ChatThreadInfoPageRetriever(maxPageSize, startTime, this);
        return new PagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>(retriever);
    }

    /**
     * Gets the list of chat threads of a user.
     *
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of chat threads of a user.
     */
    public Page<ChatThreadInfo> listChatThreads() {
        final Integer maxPageSize = null;
        final OffsetDateTime startTime = null;
        return listChatThreadsWithRestResponse(maxPageSize, startTime).getValue();
    }

    private static final class ChatThreadInfoPageAsyncRetriever extends AsyncPagedDataRetriever<ChatThreadInfo, Page<ChatThreadInfo>> {
        private final Integer maxPageSize;

        private final OffsetDateTime startTime;

        private final ChatsImpl serviceClient;

        public ChatThreadInfoPageAsyncRetriever(Integer maxPageSize, OffsetDateTime startTime, ChatsImpl serviceClient) {
            this.maxPageSize = maxPageSize;
            this.startTime = startTime;
            this.serviceClient = serviceClient;
        }

        public void getFirstPage(Callback<Page<ChatThreadInfo>> callback) {
            serviceClient.listChatThreads(maxPageSize, startTime, callback);
        }

        public void getPage(String nextLink, Callback<Page<ChatThreadInfo>> callback) {
            serviceClient.listChatThreadsNext(nextLink, callback);
        }
    }

    /**
     * Gets the list of chat threads of a user.
     *
     * @param maxPageSize The maximum number of chat threads returned per page.
     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`.
     * @param callback the Callback that receives the response collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void listChatThreadsPagesAsync(Integer maxPageSize, OffsetDateTime startTime, final Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>> callback) {
        ChatThreadInfoPageAsyncRetriever retriever = new ChatThreadInfoPageAsyncRetriever(maxPageSize, startTime, this);
        callback.onSuccess(new AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>(retriever), null);
    }

    /**
     * Gets a chat thread.
     *
     * @param chatThreadId Id of the thread.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void getChatThread(String chatThreadId, final Callback<ChatThread> callback) {
        final String accept = "application/json";
        Call<ResponseBody> call = service.getChatThread(accept, chatThreadId, this.client.getApiVersion());
        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {
                if (response.isSuccessful()) {
                    if (response.code() == 200) {
                        final ChatThread decodedResult;
                        try {
                            decodedResult = client.deserializeContent(response.headers(), response.body(), ChatThread.class);
                        } catch(Exception ex) {
                            callback.onFailure(ex, response.raw());
                            return;
                        }
                        callback.onSuccess(decodedResult, response.raw());
                    } else {
                        final String strContent = client.readAsString(response.body());
                        callback.onFailure(new CommunicationErrorResponseException(strContent, response.raw()), response.raw());
                    }
                } else {
                    final String strContent = client.readAsString(response.errorBody());
                    callback.onFailure(new HttpResponseException(strContent, response.raw()), response.raw());
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                callback.onFailure(t, null);
            }
        };
        call.enqueue(retrofitCallback);
    }

    /**
     * Gets a chat thread.
     *
     * @param chatThreadId Id of the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a chat thread.
     */
    public Response<ChatThread> getChatThreadWithRestResponse(String chatThreadId) {
        final String accept = "application/json";
        final retrofit2.Response<ResponseBody> response = this.client.executeRetrofitCall(service.getChatThread(accept, chatThreadId, this.client.getApiVersion()));
        if (response.isSuccessful()) {
            if (response.code() == 200) {
                return new Response<>(response.raw().request(),
                                        response.code(),
                                        response.headers(),
                                        this.client.deserializeContent(response.headers(), response.body(), ChatThread.class));
            } else {
                final String strContent = this.client.readAsString(response.body());
                throw new CommunicationErrorResponseException(strContent, response.raw());
            }
        } else {
            final String strContent = this.client.readAsString(response.errorBody());
            throw new HttpResponseException(strContent, response.raw());
        }
    }

    /**
     * Deletes a thread.
     *
     * @param chatThreadId Id of the thread to be deleted.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void deleteChatThread(String chatThreadId, final Callback<Void> callback) {
        final String accept = "application/json";
        Call<ResponseBody> call = service.deleteChatThread(accept, chatThreadId, this.client.getApiVersion());
        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {
                if (response.isSuccessful()) {
                    if (response.code() == 204) {
                        final Void decodedResult;
                        try {
                            decodedResult = client.deserializeContent(response.headers(), response.body(), Void.class);
                        } catch(Exception ex) {
                            callback.onFailure(ex, response.raw());
                            return;
                        }
                        callback.onSuccess(decodedResult, response.raw());
                    } else {
                        final String strContent = client.readAsString(response.body());
                        callback.onFailure(new CommunicationErrorResponseException(strContent, response.raw()), response.raw());
                    }
                } else {
                    final String strContent = client.readAsString(response.errorBody());
                    callback.onFailure(new HttpResponseException(strContent, response.raw()), response.raw());
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                callback.onFailure(t, null);
            }
        };
        call.enqueue(retrofitCallback);
    }

    /**
     * Deletes a thread.
     *
     * @param chatThreadId Id of the thread to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    public Response<Void> deleteChatThreadWithRestResponse(String chatThreadId) {
        final String accept = "application/json";
        final retrofit2.Response<ResponseBody> response = this.client.executeRetrofitCall(service.deleteChatThread(accept, chatThreadId, this.client.getApiVersion()));
        if (response.isSuccessful()) {
            if (response.code() == 204) {
                return new Response<>(response.raw().request(),
                                        response.code(),
                                        response.headers(),
                                        this.client.deserializeContent(response.headers(), response.body(), Void.class));
            } else {
                final String strContent = this.client.readAsString(response.body());
                throw new CommunicationErrorResponseException(strContent, response.raw());
            }
        } else {
            final String strContent = this.client.readAsString(response.errorBody());
            throw new HttpResponseException(strContent, response.raw());
        }
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void listChatThreadsNext(String nextLink, final Callback<Page<ChatThreadInfo>> callback) {
        final String accept = "application/json";
        Call<ResponseBody> call = service.listChatThreadsNext(accept, nextLink);
        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {
                if (response.isSuccessful()) {
                    if (response.code() == 200) {
                        final ChatThreadsInfoCollection decodedResult;
                        try {
                            decodedResult = client.deserializeContent(response.headers(), response.body(), ChatThreadsInfoCollection.class);
                        } catch(Exception ex) {
                            callback.onFailure(ex, response.raw());
                            return;
                        }
                        callback.onSuccess(new Page<ChatThreadInfo>(nextLink, decodedResult.getValue(), decodedResult.getNextLink()), response.raw());
                    } else {
                        final String strContent = client.readAsString(response.body());
                        callback.onFailure(new CommunicationErrorResponseException(strContent, response.raw()), response.raw());
                    }
                } else {
                    final String strContent = client.readAsString(response.errorBody());
                    callback.onFailure(new HttpResponseException(strContent, response.raw()), response.raw());
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                callback.onFailure(t, null);
            }
        };
        call.enqueue(retrofitCallback);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of chat threads.
     */
    public Response<Page<ChatThreadInfo>> listChatThreadsNextWithRestResponse(String nextLink) {
        final String accept = "application/json";
        final retrofit2.Response<ResponseBody> response = this.client.executeRetrofitCall(service.listChatThreadsNext(accept, nextLink));
        if (response.isSuccessful()) {
            if (response.code() == 200) {
                final ChatThreadsInfoCollection decodedResult;
                try {
                    decodedResult = this.client.deserializeContent(response.headers(), response.body(), ChatThreadsInfoCollection.class);
                } catch(Exception ex) {
                    final String strContent = this.client.readAsString(response.body());
                    throw new CommunicationErrorResponseException(strContent, response.raw());
                }
                return new Response<>(response.raw().request(),
                                        response.code(),
                                        response.headers(),
                                        new Page<ChatThreadInfo>(nextLink, decodedResult.getValue(), decodedResult.getNextLink()));
            } else {
                final String strContent = this.client.readAsString(response.body());
                throw new CommunicationErrorResponseException(strContent, response.raw());
            }
        } else {
            final String strContent = this.client.readAsString(response.errorBody());
            throw new HttpResponseException(strContent, response.raw());
        }
    }
}
