// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.android.communication.chat.implementation;

import com.azure.android.communication.chat.implementation.models.ChatThreadsItemCollection;
import com.azure.android.communication.chat.implementation.models.CommunicationErrorResponseException;
import com.azure.android.communication.chat.implementation.models.CreateChatThreadOptions;
import com.azure.android.communication.chat.implementation.models.CreateChatThreadResult;
import com.azure.android.communication.chat.models.ChatThreadItem;
import com.azure.android.core.rest.Callback;
import com.azure.android.core.rest.Response;
import com.azure.android.core.rest.RestProxy;
import com.azure.android.core.rest.annotation.BodyParam;
import com.azure.android.core.rest.annotation.Delete;
import com.azure.android.core.rest.annotation.ExpectedResponses;
import com.azure.android.core.rest.annotation.Get;
import com.azure.android.core.rest.annotation.HeaderParam;
import com.azure.android.core.rest.annotation.Host;
import com.azure.android.core.rest.annotation.HostParam;
import com.azure.android.core.rest.annotation.PathParam;
import com.azure.android.core.rest.annotation.Post;
import com.azure.android.core.rest.annotation.QueryParam;
import com.azure.android.core.rest.annotation.ReturnType;
import com.azure.android.core.rest.annotation.ServiceInterface;
import com.azure.android.core.rest.annotation.ServiceMethod;
import com.azure.android.core.rest.annotation.UnexpectedResponseExceptionType;
import com.azure.android.core.rest.annotation.UnexpectedResponseExceptionTypes;
import com.azure.android.core.rest.util.paging.PagedResponse;
import com.azure.android.core.rest.util.paging.PagedResponseBase;
import com.azure.android.core.util.Context;
import java.util.concurrent.ExecutionException;
import java9.util.concurrent.CompletableFuture;
import java9.util.function.Function;
import org.threeten.bp.OffsetDateTime;

/** An instance of this class provides access to all the operations defined in Chats. */
public final class ChatImpl {
    /** The proxy service used to perform REST calls. */
    private final ChatsService service;

    /** The service client containing this operation class. */
    private final AzureCommunicationChatServiceImpl client;

    /**
     * Initializes an instance of ChatsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ChatImpl(AzureCommunicationChatServiceImpl client) {
        this.service = RestProxy.create(ChatsService.class, client.getHttpPipeline(), client.getJacksonSerder());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureCommunicationChatServiceChats to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AzureCommunicationCh")
    private interface ChatsService {
        @Post("/chat/threads")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionTypes({@UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)})
        void createChatThread(
                @HostParam("endpoint") String endpoint,
                @HeaderParam("repeatability-Request-Id") String repeatabilityRequestId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") CreateChatThreadOptions createChatThreadRequest,
                @HeaderParam("Accept") String accept,
                Context context,
                Callback<Response<CreateChatThreadResult>> callback);

        @Get("/chat/threads")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionTypes({@UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)})
        void listChatThreads(
                @HostParam("endpoint") String endpoint,
                @QueryParam("maxPageSize") Integer maxPageSize,
                @QueryParam("startTime") OffsetDateTime startTime,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context,
                Callback<Response<ChatThreadsItemCollection>> callback);

        @Delete("/chat/threads/{chatThreadId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionTypes({@UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)})
        void deleteChatThread(
                @HostParam("endpoint") String endpoint,
                @PathParam("chatThreadId") String chatThreadId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context,
                Callback<Response<Void>> callback);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionTypes({@UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)})
        void listChatThreadsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                Context context,
                Callback<Response<ChatThreadsItemCollection>> callback);
    }

    /**
     * Creates a chat thread.
     *
     * @param createChatThreadRequest Request payload for creating a chat thread.
     * @param repeatabilityRequestId If specified, the client directs that the request is repeatable; that is, that the
     *     client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate
     *     response without the server executing the request multiple times. The value of the Repeatability-Request-Id
     *     is an opaque string representing a client-generated, globally unique for all time, identifier for the
     *     request. It is recommended to use version 4 (random) UUIDs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<CreateChatThreadResult>> createChatThreadWithResponseAsync(
            CreateChatThreadOptions createChatThreadRequest, String repeatabilityRequestId) {
        final String accept = "application/json";
        ResponseCompletableFuture<CreateChatThreadResult> completableFuture = new ResponseCompletableFuture<>();
        service.createChatThread(
                this.client.getEndpoint(),
                repeatabilityRequestId,
                this.client.getApiVersion(),
                createChatThreadRequest,
                accept,
                Context.NONE,
                completableFuture);
        return completableFuture;
    }

    /**
     * Creates a chat thread.
     *
     * @param createChatThreadRequest Request payload for creating a chat thread.
     * @param repeatabilityRequestId If specified, the client directs that the request is repeatable; that is, that the
     *     client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate
     *     response without the server executing the request multiple times. The value of the Repeatability-Request-Id
     *     is an opaque string representing a client-generated, globally unique for all time, identifier for the
     *     request. It is recommended to use version 4 (random) UUIDs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<CreateChatThreadResult>> createChatThreadWithResponseAsync(
            CreateChatThreadOptions createChatThreadRequest, String repeatabilityRequestId, Context context) {
        final String accept = "application/json";
        ResponseCompletableFuture<CreateChatThreadResult> completableFuture = new ResponseCompletableFuture<>();
        service.createChatThread(
                this.client.getEndpoint(),
                repeatabilityRequestId,
                this.client.getApiVersion(),
                createChatThreadRequest,
                accept,
                context,
                completableFuture);
        return completableFuture;
    }

    /**
     * Creates a chat thread.
     *
     * @param createChatThreadRequest Request payload for creating a chat thread.
     * @param repeatabilityRequestId If specified, the client directs that the request is repeatable; that is, that the
     *     client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate
     *     response without the server executing the request multiple times. The value of the Repeatability-Request-Id
     *     is an opaque string representing a client-generated, globally unique for all time, identifier for the
     *     request. It is recommended to use version 4 (random) UUIDs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the create chat thread operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<CreateChatThreadResult> createChatThreadAsync(
            CreateChatThreadOptions createChatThreadRequest, String repeatabilityRequestId) {
        return createChatThreadWithResponseAsync(createChatThreadRequest, repeatabilityRequestId)
                .thenApply(response -> response.getValue());
    }

    /**
     * Creates a chat thread.
     *
     * @param createChatThreadRequest Request payload for creating a chat thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the create chat thread operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<CreateChatThreadResult> createChatThreadAsync(
            CreateChatThreadOptions createChatThreadRequest) {
        final String repeatabilityRequestId = null;
        return createChatThreadWithResponseAsync(createChatThreadRequest, repeatabilityRequestId)
                .thenApply(response -> response.getValue());
    }

    /**
     * Creates a chat thread.
     *
     * @param createChatThreadRequest Request payload for creating a chat thread.
     * @param repeatabilityRequestId If specified, the client directs that the request is repeatable; that is, that the
     *     client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate
     *     response without the server executing the request multiple times. The value of the Repeatability-Request-Id
     *     is an opaque string representing a client-generated, globally unique for all time, identifier for the
     *     request. It is recommended to use version 4 (random) UUIDs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the create chat thread operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<CreateChatThreadResult> createChatThreadAsync(
            CreateChatThreadOptions createChatThreadRequest, String repeatabilityRequestId, Context context) {
        return createChatThreadWithResponseAsync(createChatThreadRequest, repeatabilityRequestId, context)
                .thenApply(response -> response.getValue());
    }

    /**
     * Creates a chat thread.
     *
     * @param createChatThreadRequest Request payload for creating a chat thread.
     * @param repeatabilityRequestId If specified, the client directs that the request is repeatable; that is, that the
     *     client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate
     *     response without the server executing the request multiple times. The value of the Repeatability-Request-Id
     *     is an opaque string representing a client-generated, globally unique for all time, identifier for the
     *     request. It is recommended to use version 4 (random) UUIDs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the create chat thread operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreateChatThreadResult createChatThread(
            CreateChatThreadOptions createChatThreadRequest, String repeatabilityRequestId) {
        try {
            return createChatThreadAsync(createChatThreadRequest, repeatabilityRequestId).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Creates a chat thread.
     *
     * @param createChatThreadRequest Request payload for creating a chat thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the create chat thread operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreateChatThreadResult createChatThread(CreateChatThreadOptions createChatThreadRequest) {
        final String repeatabilityRequestId = null;
        try {
            return createChatThreadAsync(createChatThreadRequest, repeatabilityRequestId).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Creates a chat thread.
     *
     * @param createChatThreadRequest Request payload for creating a chat thread.
     * @param repeatabilityRequestId If specified, the client directs that the request is repeatable; that is, that the
     *     client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate
     *     response without the server executing the request multiple times. The value of the Repeatability-Request-Id
     *     is an opaque string representing a client-generated, globally unique for all time, identifier for the
     *     request. It is recommended to use version 4 (random) UUIDs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the create chat thread operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CreateChatThreadResult> createChatThreadWithResponse(
            CreateChatThreadOptions createChatThreadRequest, String repeatabilityRequestId, Context context) {
        try {
            return createChatThreadWithResponseAsync(createChatThreadRequest, repeatabilityRequestId, context).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Gets the list of chat threads of a user.
     *
     * @param maxPageSize The maximum number of chat threads returned per page.
     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in RFC3339 format:
     *     `yyyy-MM-ddTHH:mm:ssZ`.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of chat threads of a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<PagedResponse<ChatThreadItem>> listChatThreadsSinglePageAsync(
            Integer maxPageSize, OffsetDateTime startTime) {
        final String accept = "application/json";
        PagedResponseCompletableFuture<ChatThreadsItemCollection, ChatThreadItem> completableFuture =
                new PagedResponseCompletableFuture<>(
                        response -> {
                            return new PagedResponseBase<>(
                                    response.getRequest(),
                                    response.getStatusCode(),
                                    response.getHeaders(),
                                    response.getValue().getValue(),
                                    response.getValue().getNextLink(),
                                    null);
                        });

        service.listChatThreads(
                this.client.getEndpoint(),
                maxPageSize,
                startTime,
                this.client.getApiVersion(),
                accept,
                Context.NONE,
                completableFuture);
        return completableFuture;
    }

    /**
     * Gets the list of chat threads of a user.
     *
     * @param maxPageSize The maximum number of chat threads returned per page.
     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in RFC3339 format:
     *     `yyyy-MM-ddTHH:mm:ssZ`.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of chat threads of a user.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<PagedResponse<ChatThreadItem>> listChatThreadsSinglePageAsync(
            Integer maxPageSize, OffsetDateTime startTime, Context context) {
        final String accept = "application/json";
        PagedResponseCompletableFuture<ChatThreadsItemCollection, ChatThreadItem> completableFuture =
                new PagedResponseCompletableFuture<>(
                        response -> {
                            return new PagedResponseBase<>(
                                    response.getRequest(),
                                    response.getStatusCode(),
                                    response.getHeaders(),
                                    response.getValue().getValue(),
                                    response.getValue().getNextLink(),
                                    null);
                        });

        service.listChatThreads(
                this.client.getEndpoint(),
                maxPageSize,
                startTime,
                this.client.getApiVersion(),
                accept,
                context,
                completableFuture);
        return completableFuture;
    }

    /**
     * Gets the list of chat threads of a user.
     *
     * @param maxPageSize The maximum number of chat threads returned per page.
     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in RFC3339 format:
     *     `yyyy-MM-ddTHH:mm:ssZ`.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of chat threads of a user.
     */
    /**
     * Gets the list of chat threads of a user.
     *
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of chat threads of a user.
     */
    /**
     * Gets the list of chat threads of a user.
     *
     * @param maxPageSize The maximum number of chat threads returned per page.
     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in RFC3339 format:
     *     `yyyy-MM-ddTHH:mm:ssZ`.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of chat threads of a user.
     */
    /**
     * Gets the list of chat threads of a user.
     *
     * @param maxPageSize The maximum number of chat threads returned per page.
     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in RFC3339 format:
     *     `yyyy-MM-ddTHH:mm:ssZ`.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of chat threads of a user.
     */
    /**
     * Gets the list of chat threads of a user.
     *
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of chat threads of a user.
     */
    /**
     * Gets the list of chat threads of a user.
     *
     * @param maxPageSize The maximum number of chat threads returned per page.
     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in RFC3339 format:
     *     `yyyy-MM-ddTHH:mm:ssZ`.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of chat threads of a user.
     */
    /**
     * Deletes a thread.
     *
     * @param chatThreadId Id of the thread to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<Void>> deleteChatThreadWithResponseAsync(String chatThreadId) {
        final String accept = "application/json";
        ResponseCompletableFuture<Void> completableFuture = new ResponseCompletableFuture<>();
        service.deleteChatThread(
                this.client.getEndpoint(),
                chatThreadId,
                this.client.getApiVersion(),
                accept,
                Context.NONE,
                completableFuture);
        return completableFuture;
    }

    /**
     * Deletes a thread.
     *
     * @param chatThreadId Id of the thread to be deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<Void>> deleteChatThreadWithResponseAsync(String chatThreadId, Context context) {
        final String accept = "application/json";
        ResponseCompletableFuture<Void> completableFuture = new ResponseCompletableFuture<>();
        service.deleteChatThread(
                this.client.getEndpoint(),
                chatThreadId,
                this.client.getApiVersion(),
                accept,
                context,
                completableFuture);
        return completableFuture;
    }

    /**
     * Deletes a thread.
     *
     * @param chatThreadId Id of the thread to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Void> deleteChatThreadAsync(String chatThreadId) {
        return deleteChatThreadWithResponseAsync(chatThreadId).thenApply(response -> response.getValue());
    }

    /**
     * Deletes a thread.
     *
     * @param chatThreadId Id of the thread to be deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Void> deleteChatThreadAsync(String chatThreadId, Context context) {
        return deleteChatThreadWithResponseAsync(chatThreadId, context).thenApply(response -> response.getValue());
    }

    /**
     * Deletes a thread.
     *
     * @param chatThreadId Id of the thread to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteChatThread(String chatThreadId) {
        try {
            deleteChatThreadAsync(chatThreadId).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Deletes a thread.
     *
     * @param chatThreadId Id of the thread to be deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteChatThreadWithResponse(String chatThreadId, Context context) {
        try {
            return deleteChatThreadWithResponseAsync(chatThreadId, context).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of chat threads.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<PagedResponse<ChatThreadItem>> listChatThreadsNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        PagedResponseCompletableFuture<ChatThreadsItemCollection, ChatThreadItem> completableFuture =
                new PagedResponseCompletableFuture<>(
                        response -> {
                            return new PagedResponseBase<>(
                                    response.getRequest(),
                                    response.getStatusCode(),
                                    response.getHeaders(),
                                    response.getValue().getValue(),
                                    response.getValue().getNextLink(),
                                    null);
                        });

        service.listChatThreadsNext(nextLink, this.client.getEndpoint(), accept, Context.NONE, completableFuture);
        return completableFuture;
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of chat threads.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<PagedResponse<ChatThreadItem>> listChatThreadsNextSinglePageAsync(
            String nextLink, Context context) {
        final String accept = "application/json";
        PagedResponseCompletableFuture<ChatThreadsItemCollection, ChatThreadItem> completableFuture =
                new PagedResponseCompletableFuture<>(
                        response -> {
                            return new PagedResponseBase<>(
                                    response.getRequest(),
                                    response.getStatusCode(),
                                    response.getHeaders(),
                                    response.getValue().getValue(),
                                    response.getValue().getNextLink(),
                                    null);
                        });

        service.listChatThreadsNext(nextLink, this.client.getEndpoint(), accept, context, completableFuture);
        return completableFuture;
    }

    private static final class ResponseCompletableFuture<T> extends CompletableFuture<Response<T>>
            implements Callback<Response<T>> {
        @Override
        public void onSuccess(Response<T> response) {
            this.complete(response);
        }

        @Override
        public void onFailure(Throwable error) {
            this.completeExceptionally(error);
        }
    }

    private static final class PagedResponseCompletableFuture<P, T> extends CompletableFuture<PagedResponse<T>>
            implements Callback<Response<P>> {
        private final Function<Response<P>, PagedResponse<T>> converter;

        PagedResponseCompletableFuture(Function<Response<P>, PagedResponse<T>> converter) {
            this.converter = converter;
        }

        @Override
        public void onSuccess(Response<P> response) {
            this.complete(this.converter.apply(response));
        }

        @Override
        public void onFailure(Throwable error) {
            this.completeExceptionally(error);
        }
    }
}
