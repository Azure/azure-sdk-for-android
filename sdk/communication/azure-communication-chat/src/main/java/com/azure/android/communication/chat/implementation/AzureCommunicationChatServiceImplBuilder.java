// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.android.communication.chat.implementation;

import com.azure.android.core.http.HttpClient;
import com.azure.android.core.http.HttpPipeline;
import com.azure.android.core.http.HttpPipelineBuilder;
import com.azure.android.core.http.HttpPipelinePolicy;
import com.azure.android.core.http.policy.CookiePolicy;
import com.azure.android.core.http.policy.HttpLogOptions;
import com.azure.android.core.http.policy.HttpLoggingPolicy;
import com.azure.android.core.http.policy.RetryPolicy;
import com.azure.android.core.http.policy.UserAgentPolicy;
import com.azure.android.core.rest.annotation.ServiceClientBuilder;
import com.azure.android.core.serde.jackson.JacksonSerder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** A builder for creating a new instance of the AzureCommunicationChatService type. */
@ServiceClientBuilder(serviceClients = {AzureCommunicationChatServiceImpl.class})
public final class AzureCommunicationChatServiceImplBuilder {
    private static final String SDK_NAME = "name";

    private static final String SDK_VERSION = "version";

    private final Map<String, String> properties = new HashMap<>();

    /** Create an instance of the AzureCommunicationChatServiceImplBuilder. */
    public AzureCommunicationChatServiceImplBuilder() {
        this.pipelinePolicies = new ArrayList<>();
    }

    /*
     * The endpoint of the Azure Communication resource.
     */
    private String endpoint;

    /**
     * Sets The endpoint of the Azure Communication resource.
     *
     * @param endpoint the endpoint value.
     * @return the AzureCommunicationChatServiceImplBuilder.
     */
    public AzureCommunicationChatServiceImplBuilder endpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /*
     * Api Version
     */
    private String apiVersion;

    /**
     * Sets Api Version.
     *
     * @param apiVersion the apiVersion value.
     * @return the AzureCommunicationChatServiceImplBuilder.
     */
    public AzureCommunicationChatServiceImplBuilder apiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    /*
     * The HTTP pipeline to send requests through
     */
    private HttpPipeline pipeline;

    /**
     * Sets The HTTP pipeline to send requests through.
     *
     * @param pipeline the pipeline value.
     * @return the AzureCommunicationChatServiceImplBuilder.
     */
    public AzureCommunicationChatServiceImplBuilder pipeline(HttpPipeline pipeline) {
        this.pipeline = pipeline;
        return this;
    }

    /*
     * The HTTP client used to send the request.
     */
    private HttpClient httpClient;

    /**
     * Sets The HTTP client used to send the request.
     *
     * @param httpClient the httpClient value.
     * @return the AzureCommunicationChatServiceImplBuilder.
     */
    public AzureCommunicationChatServiceImplBuilder httpClient(HttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    /*
     * The logging configuration for HTTP requests and responses.
     */
    private HttpLogOptions httpLogOptions;

    /**
     * Sets The logging configuration for HTTP requests and responses.
     *
     * @param httpLogOptions the httpLogOptions value.
     * @return the AzureCommunicationChatServiceImplBuilder.
     */
    public AzureCommunicationChatServiceImplBuilder httpLogOptions(HttpLogOptions httpLogOptions) {
        this.httpLogOptions = httpLogOptions;
        return this;
    }

    /*
     * The retry policy that will attempt to retry failed requests, if
     * applicable.
     */
    private RetryPolicy retryPolicy;

    /**
     * Sets The retry policy that will attempt to retry failed requests, if applicable.
     *
     * @param retryPolicy the retryPolicy value.
     * @return the AzureCommunicationChatServiceImplBuilder.
     */
    public AzureCommunicationChatServiceImplBuilder retryPolicy(RetryPolicy retryPolicy) {
        this.retryPolicy = retryPolicy;
        return this;
    }

    /*
     * The list of Http pipeline policies to add.
     */
    private final List<HttpPipelinePolicy> pipelinePolicies;

    /**
     * Adds a custom Http pipeline policy.
     *
     * @param customPolicy The custom Http pipeline policy to add.
     * @return the AzureCommunicationChatServiceImplBuilder.
     */
    public AzureCommunicationChatServiceImplBuilder addPolicy(HttpPipelinePolicy customPolicy) {
        pipelinePolicies.add(customPolicy);
        return this;
    }

    /**
     * Builds an instance of AzureCommunicationChatServiceImpl with the provided parameters.
     *
     * @return an instance of AzureCommunicationChatServiceImpl.
     */
    public AzureCommunicationChatServiceImpl buildClient() {
        if (apiVersion == null) {
            this.apiVersion = "2021-03-07";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        AzureCommunicationChatServiceImpl client =
                new AzureCommunicationChatServiceImpl(pipeline, JacksonSerder.createDefault(), endpoint, apiVersion);
        return client;
    }

    private HttpPipeline createHttpPipeline() {
        if (httpLogOptions == null) {
            httpLogOptions = new HttpLogOptions();
        }
        List<HttpPipelinePolicy> policies = new ArrayList<>();
        String clientName = properties.get(SDK_NAME);
        if (clientName == null) {
            clientName = "UnknownName";
        }
        String clientVersion = properties.get(SDK_VERSION);
        if (clientVersion == null) {
            clientVersion = "UnknownVersion";
        }
        policies.add(new UserAgentPolicy(null, clientName, clientVersion));
        policies.add(retryPolicy == null ? RetryPolicy.withExponentialBackoff() : retryPolicy);
        policies.add(new CookiePolicy());
        policies.addAll(this.pipelinePolicies);
        policies.add(new HttpLoggingPolicy(httpLogOptions));
        HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                        .policies(policies.toArray(new HttpPipelinePolicy[0]))
                        .httpClient(httpClient)
                        .build();
        return httpPipeline;
    }
}
