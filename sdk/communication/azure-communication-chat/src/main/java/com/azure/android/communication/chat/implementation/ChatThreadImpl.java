// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.android.communication.chat.implementation;

import com.azure.android.communication.chat.implementation.models.AddChatParticipantsOptions;
import com.azure.android.communication.chat.implementation.models.AddChatParticipantsResult;
import com.azure.android.communication.chat.implementation.models.ChatMessage;
import com.azure.android.communication.chat.implementation.models.ChatMessageReadReceipt;
import com.azure.android.communication.chat.implementation.models.ChatMessageReadReceiptsCollection;
import com.azure.android.communication.chat.implementation.models.ChatMessagesCollection;
import com.azure.android.communication.chat.implementation.models.ChatParticipant;
import com.azure.android.communication.chat.implementation.models.ChatParticipantsCollection;
import com.azure.android.communication.chat.implementation.models.ChatThreadProperties;
import com.azure.android.communication.chat.implementation.models.CommunicationErrorResponseException;
import com.azure.android.communication.chat.implementation.models.CommunicationIdentifierModel;
import com.azure.android.communication.chat.implementation.models.SendReadReceiptRequest;
import com.azure.android.communication.chat.models.SendChatMessageOptions;
import com.azure.android.communication.chat.models.SendChatMessageResult;
import com.azure.android.communication.chat.models.TypingNotificationOptions;
import com.azure.android.communication.chat.models.UpdateChatMessageOptions;
import com.azure.android.communication.chat.models.UpdateChatThreadOptions;
import com.azure.android.core.rest.Callback;
import com.azure.android.core.rest.Response;
import com.azure.android.core.rest.RestProxy;
import com.azure.android.core.rest.annotation.BodyParam;
import com.azure.android.core.rest.annotation.Delete;
import com.azure.android.core.rest.annotation.ExpectedResponses;
import com.azure.android.core.rest.annotation.Get;
import com.azure.android.core.rest.annotation.HeaderParam;
import com.azure.android.core.rest.annotation.Host;
import com.azure.android.core.rest.annotation.HostParam;
import com.azure.android.core.rest.annotation.Patch;
import com.azure.android.core.rest.annotation.PathParam;
import com.azure.android.core.rest.annotation.Post;
import com.azure.android.core.rest.annotation.QueryParam;
import com.azure.android.core.rest.annotation.ReturnType;
import com.azure.android.core.rest.annotation.ServiceInterface;
import com.azure.android.core.rest.annotation.ServiceMethod;
import com.azure.android.core.rest.annotation.UnexpectedResponseExceptionType;
import com.azure.android.core.rest.annotation.UnexpectedResponseExceptionTypes;
import com.azure.android.core.rest.util.paging.PagedResponse;
import com.azure.android.core.rest.util.paging.PagedResponseBase;
import com.azure.android.core.util.RequestContext;
import java.util.concurrent.ExecutionException;
import java9.util.concurrent.CompletableFuture;
import java9.util.function.Function;
import org.threeten.bp.OffsetDateTime;

/** An instance of this class provides access to all the operations defined in ChatThreads. */
public final class ChatThreadImpl {
    /** The proxy service used to perform REST calls. */
    private final ChatThreadsService service;

    /** The service client containing this operation class. */
    private final AzureCommunicationChatServiceImpl client;

    /**
     * Initializes an instance of ChatThreadsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ChatThreadImpl(AzureCommunicationChatServiceImpl client) {
        this.service = RestProxy.create(ChatThreadsService.class, client.getHttpPipeline(), client.getJacksonSerder());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureCommunicationChatServiceChatThreads to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AzureCommunicationCh")
    private interface ChatThreadsService {
        @Get("/chat/threads/{chatThreadId}/readReceipts")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionTypes({@UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)})
        void listChatReadReceipts(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("maxPageSize") Integer maxPageSize,
            @QueryParam("skip") Integer skip,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            RequestContext requestContext,
            Callback<Response<ChatMessageReadReceiptsCollection>> callback);

        @Post("/chat/threads/{chatThreadId}/readReceipts")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionTypes({@UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)})
        void sendChatReadReceipt(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SendReadReceiptRequest sendReadReceiptRequest,
            @HeaderParam("Accept") String accept,
            RequestContext requestContext,
            Callback<Response<Void>> callback);

        @Post("/chat/threads/{chatThreadId}/messages")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionTypes({@UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)})
        void sendChatMessage(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SendChatMessageOptions sendChatMessageRequest,
            @HeaderParam("Accept") String accept,
            RequestContext requestContext,
            Callback<Response<SendChatMessageResult>> callback);

        @Get("/chat/threads/{chatThreadId}/messages")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionTypes({@UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)})
        void listChatMessages(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("maxPageSize") Integer maxPageSize,
            @QueryParam("startTime") OffsetDateTime startTime,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            RequestContext requestContext,
            Callback<Response<ChatMessagesCollection>> callback);

        @Get("/chat/threads/{chatThreadId}/messages/{chatMessageId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionTypes({@UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)})
        void getChatMessage(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @PathParam("chatMessageId") String chatMessageId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            RequestContext requestContext,
            Callback<Response<ChatMessage>> callback);

        @Patch("/chat/threads/{chatThreadId}/messages/{chatMessageId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionTypes({@UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)})
        void updateChatMessage(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @PathParam("chatMessageId") String chatMessageId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/merge-patch+json") UpdateChatMessageOptions updateChatMessageRequest,
            @HeaderParam("Accept") String accept,
            RequestContext requestContext,
            Callback<Response<Void>> callback);

        @Delete("/chat/threads/{chatThreadId}/messages/{chatMessageId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionTypes({@UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)})
        void deleteChatMessage(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @PathParam("chatMessageId") String chatMessageId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            RequestContext requestContext,
            Callback<Response<Void>> callback);

        @Get("/chat/threads/{chatThreadId}/participants")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionTypes({@UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)})
        void listChatParticipants(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("maxPageSize") Integer maxPageSize,
            @QueryParam("skip") Integer skip,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            RequestContext requestContext,
            Callback<Response<ChatParticipantsCollection>> callback);

        @Post("/chat/threads/{chatThreadId}/participants/:remove")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionTypes({@UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)})
        void removeChatParticipant(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") CommunicationIdentifierModel participantCommunicationIdentifier,
            @HeaderParam("Accept") String accept,
            RequestContext requestContext,
            Callback<Response<Void>> callback);

        @Post("/chat/threads/{chatThreadId}/participants/:add")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionTypes({@UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)})
        void addChatParticipants(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") AddChatParticipantsOptions addChatParticipantsRequest,
            @HeaderParam("Accept") String accept,
            RequestContext requestContext,
            Callback<Response<AddChatParticipantsResult>> callback);

        @Patch("/chat/threads/{chatThreadId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionTypes({@UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)})
        void updateChatThreadProperties(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/merge-patch+json") UpdateChatThreadOptions updateChatThreadRequest,
            @HeaderParam("Accept") String accept,
            RequestContext requestContext,
            Callback<Response<Void>> callback);

        @Get("/chat/threads/{chatThreadId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionTypes({@UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)})
        void getChatThreadProperties(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            RequestContext requestContext,
            Callback<Response<ChatThreadProperties>> callback);

        @Post("/chat/threads/{chatThreadId}/typing")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionTypes({@UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)})
        void sendTypingNotification(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") TypingNotificationOptions sendTypingNotificationRequest,
            @HeaderParam("Accept") String accept,
            RequestContext requestContext,
            Callback<Response<Void>> callback);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionTypes({@UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)})
        void listChatReadReceiptsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept,
            RequestContext requestContext,
            Callback<Response<ChatMessageReadReceiptsCollection>> callback);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionTypes({@UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)})
        void listChatMessagesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept,
            RequestContext requestContext,
            Callback<Response<ChatMessagesCollection>> callback);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionTypes({@UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)})
        void listChatParticipantsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept,
            RequestContext requestContext,
            Callback<Response<ChatParticipantsCollection>> callback);
    }

    /**
     * Gets chat message read receipts for a thread.
     *
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.
     * @param skip Skips chat message read receipts up to a specified position in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chat message read receipts for a thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<PagedResponse<ChatMessageReadReceipt>> listChatReadReceiptsSinglePageAsync(
        String chatThreadId, Integer maxPageSize, Integer skip) {
        final String accept = "application/json";
        PagedResponseCompletableFuture<ChatMessageReadReceiptsCollection, ChatMessageReadReceipt> completableFuture =
            new PagedResponseCompletableFuture<>(
                response -> {
                    return new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null);
                });

        service.listChatReadReceipts(
            this.client.getEndpoint(),
            chatThreadId,
            maxPageSize,
            skip,
            this.client.getApiVersion(),
            accept,
            RequestContext.NONE,
            completableFuture);
        return completableFuture;
    }

    /**
     * Gets chat message read receipts for a thread.
     *
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.
     * @param skip Skips chat message read receipts up to a specified position in response.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chat message read receipts for a thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<PagedResponse<ChatMessageReadReceipt>> listChatReadReceiptsSinglePageAsync(
        String chatThreadId, Integer maxPageSize, Integer skip, RequestContext requestContext) {
        final String accept = "application/json";
        PagedResponseCompletableFuture<ChatMessageReadReceiptsCollection, ChatMessageReadReceipt> completableFuture =
            new PagedResponseCompletableFuture<>(
                response -> {
                    return new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null);
                });

        service.listChatReadReceipts(
            this.client.getEndpoint(),
            chatThreadId,
            maxPageSize,
            skip,
            this.client.getApiVersion(),
            accept,
            requestContext,
            completableFuture);
        return completableFuture;
    }

    /**
     * Gets chat message read receipts for a thread.
     *
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.
     * @param skip Skips chat message read receipts up to a specified position in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chat message read receipts for a thread.
     */
    /**
     * Gets chat message read receipts for a thread.
     *
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chat message read receipts for a thread.
     */
    /**
     * Gets chat message read receipts for a thread.
     *
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.
     * @param skip Skips chat message read receipts up to a specified position in response.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chat message read receipts for a thread.
     */
    /**
     * Gets chat message read receipts for a thread.
     *
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.
     * @param skip Skips chat message read receipts up to a specified position in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chat message read receipts for a thread.
     */
    /**
     * Gets chat message read receipts for a thread.
     *
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chat message read receipts for a thread.
     */
    /**
     * Gets chat message read receipts for a thread.
     *
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.
     * @param skip Skips chat message read receipts up to a specified position in response.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chat message read receipts for a thread.
     */
    /**
     * Sends a read receipt event to a thread, on behalf of a user.
     *
     * @param chatThreadId Thread id to send the read receipt event to.
     * @param sendReadReceiptRequest Read receipt details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<Void>> sendChatReadReceiptWithResponseAsync(
        String chatThreadId, SendReadReceiptRequest sendReadReceiptRequest) {
        final String accept = "application/json";
        ResponseCompletableFuture<Void> completableFuture = new ResponseCompletableFuture<>();
        service.sendChatReadReceipt(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            sendReadReceiptRequest,
            accept,
            RequestContext.NONE,
            completableFuture);
        return completableFuture;
    }

    /**
     * Sends a read receipt event to a thread, on behalf of a user.
     *
     * @param chatThreadId Thread id to send the read receipt event to.
     * @param sendReadReceiptRequest Read receipt details.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<Void>> sendChatReadReceiptWithResponseAsync(
        String chatThreadId, SendReadReceiptRequest sendReadReceiptRequest, RequestContext requestContext) {
        final String accept = "application/json";
        ResponseCompletableFuture<Void> completableFuture = new ResponseCompletableFuture<>();
        service.sendChatReadReceipt(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            sendReadReceiptRequest,
            accept,
            requestContext,
            completableFuture);
        return completableFuture;
    }

    /**
     * Sends a read receipt event to a thread, on behalf of a user.
     *
     * @param chatThreadId Thread id to send the read receipt event to.
     * @param sendReadReceiptRequest Read receipt details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Void> sendChatReadReceiptAsync(
        String chatThreadId, SendReadReceiptRequest sendReadReceiptRequest) {
        return sendChatReadReceiptWithResponseAsync(chatThreadId, sendReadReceiptRequest)
            .thenApply(response -> response.getValue());
    }

    /**
     * Sends a read receipt event to a thread, on behalf of a user.
     *
     * @param chatThreadId Thread id to send the read receipt event to.
     * @param sendReadReceiptRequest Read receipt details.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Void> sendChatReadReceiptAsync(
        String chatThreadId, SendReadReceiptRequest sendReadReceiptRequest, RequestContext requestContext) {
        return sendChatReadReceiptWithResponseAsync(chatThreadId, sendReadReceiptRequest, requestContext)
            .thenApply(response -> response.getValue());
    }

    /**
     * Sends a read receipt event to a thread, on behalf of a user.
     *
     * @param chatThreadId Thread id to send the read receipt event to.
     * @param sendReadReceiptRequest Read receipt details.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest sendReadReceiptRequest) {
        try {
            sendChatReadReceiptAsync(chatThreadId, sendReadReceiptRequest).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Sends a read receipt event to a thread, on behalf of a user.
     *
     * @param chatThreadId Thread id to send the read receipt event to.
     * @param sendReadReceiptRequest Read receipt details.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> sendChatReadReceiptWithResponse(
        String chatThreadId, SendReadReceiptRequest sendReadReceiptRequest, RequestContext requestContext) {
        try {
            return sendChatReadReceiptWithResponseAsync(chatThreadId, sendReadReceiptRequest, requestContext).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Sends a message to a thread.
     *
     * @param chatThreadId The thread id to send the message to.
     * @param sendChatMessageRequest Details of the message to send.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<SendChatMessageResult>> sendChatMessageWithResponseAsync(
        String chatThreadId, SendChatMessageOptions sendChatMessageRequest) {
        final String accept = "application/json";
        ResponseCompletableFuture<SendChatMessageResult> completableFuture = new ResponseCompletableFuture<>();
        service.sendChatMessage(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            sendChatMessageRequest,
            accept,
            RequestContext.NONE,
            completableFuture);
        return completableFuture;
    }

    /**
     * Sends a message to a thread.
     *
     * @param chatThreadId The thread id to send the message to.
     * @param sendChatMessageRequest Details of the message to send.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<SendChatMessageResult>> sendChatMessageWithResponseAsync(
        String chatThreadId, SendChatMessageOptions sendChatMessageRequest, RequestContext requestContext) {
        final String accept = "application/json";
        ResponseCompletableFuture<SendChatMessageResult> completableFuture = new ResponseCompletableFuture<>();
        service.sendChatMessage(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            sendChatMessageRequest,
            accept,
            requestContext,
            completableFuture);
        return completableFuture;
    }

    /**
     * Sends a message to a thread.
     *
     * @param chatThreadId The thread id to send the message to.
     * @param sendChatMessageRequest Details of the message to send.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the send message operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<SendChatMessageResult> sendChatMessageAsync(
        String chatThreadId, SendChatMessageOptions sendChatMessageRequest) {
        return sendChatMessageWithResponseAsync(chatThreadId, sendChatMessageRequest)
            .thenApply(response -> response.getValue());
    }

    /**
     * Sends a message to a thread.
     *
     * @param chatThreadId The thread id to send the message to.
     * @param sendChatMessageRequest Details of the message to send.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the send message operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<SendChatMessageResult> sendChatMessageAsync(
        String chatThreadId, SendChatMessageOptions sendChatMessageRequest, RequestContext requestContext) {
        return sendChatMessageWithResponseAsync(chatThreadId, sendChatMessageRequest, requestContext)
            .thenApply(response -> response.getValue());
    }

    /**
     * Sends a message to a thread.
     *
     * @param chatThreadId The thread id to send the message to.
     * @param sendChatMessageRequest Details of the message to send.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the send message operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SendChatMessageResult sendChatMessage(String chatThreadId, SendChatMessageOptions sendChatMessageRequest) {
        try {
            return sendChatMessageAsync(chatThreadId, sendChatMessageRequest).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Sends a message to a thread.
     *
     * @param chatThreadId The thread id to send the message to.
     * @param sendChatMessageRequest Details of the message to send.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the send message operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SendChatMessageResult> sendChatMessageWithResponse(
        String chatThreadId, SendChatMessageOptions sendChatMessageRequest, RequestContext requestContext) {
        try {
            return sendChatMessageWithResponseAsync(chatThreadId, sendChatMessageRequest, requestContext).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Gets a list of messages from a thread.
     *
     * @param chatThreadId The thread id of the message.
     * @param maxPageSize The maximum number of messages to be returned per page. The limit can be found from https://docs.microsoft.com/azure/communication-services/concepts/service-limits.
     * @param startTime The earliest point in time to get messages up to. The timestamp should be in RFC3339 format:
     *     `yyyy-MM-ddTHH:mm:ssZ`.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of messages from a thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<PagedResponse<ChatMessage>> listChatMessagesSinglePageAsync(
        String chatThreadId, Integer maxPageSize, OffsetDateTime startTime) {
        final String accept = "application/json";
        PagedResponseCompletableFuture<ChatMessagesCollection, ChatMessage> completableFuture =
            new PagedResponseCompletableFuture<>(
                response -> {
                    return new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null);
                });

        service.listChatMessages(
            this.client.getEndpoint(),
            chatThreadId,
            maxPageSize,
            startTime,
            this.client.getApiVersion(),
            accept,
            RequestContext.NONE,
            completableFuture);
        return completableFuture;
    }

    /**
     * Gets a list of messages from a thread.
     *
     * @param chatThreadId The thread id of the message.
     * @param maxPageSize The maximum number of messages to be returned per page. The limit can be found from https://docs.microsoft.com/azure/communication-services/concepts/service-limits.
     * @param startTime The earliest point in time to get messages up to. The timestamp should be in RFC3339 format:
     *     `yyyy-MM-ddTHH:mm:ssZ`.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of messages from a thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<PagedResponse<ChatMessage>> listChatMessagesSinglePageAsync(
        String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, RequestContext requestContext) {
        final String accept = "application/json";
        PagedResponseCompletableFuture<ChatMessagesCollection, ChatMessage> completableFuture =
            new PagedResponseCompletableFuture<>(
                response -> {
                    return new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null);
                });

        service.listChatMessages(
            this.client.getEndpoint(),
            chatThreadId,
            maxPageSize,
            startTime,
            this.client.getApiVersion(),
            accept,
            requestContext,
            completableFuture);
        return completableFuture;
    }

    /**
     * Gets a list of messages from a thread.
     *
     * @param chatThreadId The thread id of the message.
     * @param maxPageSize The maximum number of messages to be returned per page. The limit can be found from https://docs.microsoft.com/azure/communication-services/concepts/service-limits.
     * @param startTime The earliest point in time to get messages up to. The timestamp should be in RFC3339 format:
     *     `yyyy-MM-ddTHH:mm:ssZ`.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of messages from a thread.
     */
    /**
     * Gets a list of messages from a thread.
     *
     * @param chatThreadId The thread id of the message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of messages from a thread.
     */
    /**
     * Gets a list of messages from a thread.
     *
     * @param chatThreadId The thread id of the message.
     * @param maxPageSize The maximum number of messages to be returned per page. The limit can be found from https://docs.microsoft.com/azure/communication-services/concepts/service-limits.
     * @param startTime The earliest point in time to get messages up to. The timestamp should be in RFC3339 format:
     *     `yyyy-MM-ddTHH:mm:ssZ`.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of messages from a thread.
     */
    /**
     * Gets a list of messages from a thread.
     *
     * @param chatThreadId The thread id of the message.
     * @param maxPageSize The maximum number of messages to be returned per page. The limit can be found from https://docs.microsoft.com/azure/communication-services/concepts/service-limits.
     * @param startTime The earliest point in time to get messages up to. The timestamp should be in RFC3339 format:
     *     `yyyy-MM-ddTHH:mm:ssZ`.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of messages from a thread.
     */
    /**
     * Gets a list of messages from a thread.
     *
     * @param chatThreadId The thread id of the message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of messages from a thread.
     */
    /**
     * Gets a list of messages from a thread.
     *
     * @param chatThreadId The thread id of the message.
     * @param maxPageSize The maximum number of messages to be returned per page. The limit can be found from https://docs.microsoft.com/azure/communication-services/concepts/service-limits.
     * @param startTime The earliest point in time to get messages up to. The timestamp should be in RFC3339 format:
     *     `yyyy-MM-ddTHH:mm:ssZ`.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of messages from a thread.
     */
    /**
     * Gets a message by id.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<ChatMessage>> getChatMessageWithResponseAsync(
        String chatThreadId, String chatMessageId) {
        final String accept = "application/json";
        ResponseCompletableFuture<ChatMessage> completableFuture = new ResponseCompletableFuture<>();
        service.getChatMessage(
            this.client.getEndpoint(),
            chatThreadId,
            chatMessageId,
            this.client.getApiVersion(),
            accept,
            RequestContext.NONE,
            completableFuture);
        return completableFuture;
    }

    /**
     * Gets a message by id.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<ChatMessage>> getChatMessageWithResponseAsync(
        String chatThreadId, String chatMessageId, RequestContext requestContext) {
        final String accept = "application/json";
        ResponseCompletableFuture<ChatMessage> completableFuture = new ResponseCompletableFuture<>();
        service.getChatMessage(
            this.client.getEndpoint(),
            chatThreadId,
            chatMessageId,
            this.client.getApiVersion(),
            accept,
            requestContext,
            completableFuture);
        return completableFuture;
    }

    /**
     * Gets a message by id.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a message by id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<ChatMessage> getChatMessageAsync(String chatThreadId, String chatMessageId) {
        return getChatMessageWithResponseAsync(chatThreadId, chatMessageId).thenApply(response -> response.getValue());
    }

    /**
     * Gets a message by id.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a message by id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<ChatMessage> getChatMessageAsync(
        String chatThreadId, String chatMessageId, RequestContext requestContext) {
        return getChatMessageWithResponseAsync(chatThreadId, chatMessageId, requestContext)
            .thenApply(response -> response.getValue());
    }

    /**
     * Gets a message by id.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a message by id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChatMessage getChatMessage(String chatThreadId, String chatMessageId) {
        try {
            return getChatMessageAsync(chatThreadId, chatMessageId).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Gets a message by id.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a message by id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ChatMessage> getChatMessageWithResponse(
        String chatThreadId, String chatMessageId, RequestContext requestContext) {
        try {
            return getChatMessageWithResponseAsync(chatThreadId, chatMessageId, requestContext).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Updates a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param updateChatMessageRequest Details of the request to update the message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<Void>> updateChatMessageWithResponseAsync(
        String chatThreadId, String chatMessageId, UpdateChatMessageOptions updateChatMessageRequest) {
        final String accept = "application/json";
        ResponseCompletableFuture<Void> completableFuture = new ResponseCompletableFuture<>();
        service.updateChatMessage(
            this.client.getEndpoint(),
            chatThreadId,
            chatMessageId,
            this.client.getApiVersion(),
            updateChatMessageRequest,
            accept,
            RequestContext.NONE,
            completableFuture);
        return completableFuture;
    }

    /**
     * Updates a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param updateChatMessageRequest Details of the request to update the message.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<Void>> updateChatMessageWithResponseAsync(
        String chatThreadId,
        String chatMessageId,
        UpdateChatMessageOptions updateChatMessageRequest,
        RequestContext requestContext) {
        final String accept = "application/json";
        ResponseCompletableFuture<Void> completableFuture = new ResponseCompletableFuture<>();
        service.updateChatMessage(
            this.client.getEndpoint(),
            chatThreadId,
            chatMessageId,
            this.client.getApiVersion(),
            updateChatMessageRequest,
            accept,
            requestContext,
            completableFuture);
        return completableFuture;
    }

    /**
     * Updates a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param updateChatMessageRequest Details of the request to update the message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Void> updateChatMessageAsync(
        String chatThreadId, String chatMessageId, UpdateChatMessageOptions updateChatMessageRequest) {
        return updateChatMessageWithResponseAsync(chatThreadId, chatMessageId, updateChatMessageRequest)
            .thenApply(response -> response.getValue());
    }

    /**
     * Updates a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param updateChatMessageRequest Details of the request to update the message.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Void> updateChatMessageAsync(
        String chatThreadId,
        String chatMessageId,
        UpdateChatMessageOptions updateChatMessageRequest,
        RequestContext requestContext) {
        return updateChatMessageWithResponseAsync(chatThreadId, chatMessageId, updateChatMessageRequest, requestContext)
            .thenApply(response -> response.getValue());
    }

    /**
     * Updates a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param updateChatMessageRequest Details of the request to update the message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateChatMessage(
        String chatThreadId, String chatMessageId, UpdateChatMessageOptions updateChatMessageRequest) {
        try {
            updateChatMessageAsync(chatThreadId, chatMessageId, updateChatMessageRequest).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Updates a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param updateChatMessageRequest Details of the request to update the message.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateChatMessageWithResponse(
        String chatThreadId,
        String chatMessageId,
        UpdateChatMessageOptions updateChatMessageRequest,
        RequestContext requestContext) {
        try {
            return updateChatMessageWithResponseAsync(chatThreadId, chatMessageId, updateChatMessageRequest, requestContext)
                .get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Deletes a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<Void>> deleteChatMessageWithResponseAsync(
        String chatThreadId, String chatMessageId) {
        final String accept = "application/json";
        ResponseCompletableFuture<Void> completableFuture = new ResponseCompletableFuture<>();
        service.deleteChatMessage(
            this.client.getEndpoint(),
            chatThreadId,
            chatMessageId,
            this.client.getApiVersion(),
            accept,
            RequestContext.NONE,
            completableFuture);
        return completableFuture;
    }

    /**
     * Deletes a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<Void>> deleteChatMessageWithResponseAsync(
        String chatThreadId, String chatMessageId, RequestContext requestContext) {
        final String accept = "application/json";
        ResponseCompletableFuture<Void> completableFuture = new ResponseCompletableFuture<>();
        service.deleteChatMessage(
            this.client.getEndpoint(),
            chatThreadId,
            chatMessageId,
            this.client.getApiVersion(),
            accept,
            requestContext,
            completableFuture);
        return completableFuture;
    }

    /**
     * Deletes a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Void> deleteChatMessageAsync(String chatThreadId, String chatMessageId) {
        return deleteChatMessageWithResponseAsync(chatThreadId, chatMessageId)
            .thenApply(response -> response.getValue());
    }

    /**
     * Deletes a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Void> deleteChatMessageAsync(String chatThreadId, String chatMessageId, RequestContext requestContext) {
        return deleteChatMessageWithResponseAsync(chatThreadId, chatMessageId, requestContext)
            .thenApply(response -> response.getValue());
    }

    /**
     * Deletes a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteChatMessage(String chatThreadId, String chatMessageId) {
        try {
            deleteChatMessageAsync(chatThreadId, chatMessageId).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Deletes a message.
     *
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteChatMessageWithResponse(String chatThreadId, String chatMessageId, RequestContext requestContext) {
        try {
            return deleteChatMessageWithResponseAsync(chatThreadId, chatMessageId, requestContext).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Gets the participants of a thread.
     *
     * @param chatThreadId Thread id to get participants for.
     * @param maxPageSize The maximum number of participants to be returned per page.
     * @param skip Skips participants up to a specified position in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the participants of a thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<PagedResponse<ChatParticipant>> listChatParticipantsSinglePageAsync(
        String chatThreadId, Integer maxPageSize, Integer skip) {
        final String accept = "application/json";
        PagedResponseCompletableFuture<ChatParticipantsCollection, ChatParticipant> completableFuture =
            new PagedResponseCompletableFuture<>(
                response -> {
                    return new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null);
                });

        service.listChatParticipants(
            this.client.getEndpoint(),
            chatThreadId,
            maxPageSize,
            skip,
            this.client.getApiVersion(),
            accept,
            RequestContext.NONE,
            completableFuture);
        return completableFuture;
    }

    /**
     * Gets the participants of a thread.
     *
     * @param chatThreadId Thread id to get participants for.
     * @param maxPageSize The maximum number of participants to be returned per page.
     * @param skip Skips participants up to a specified position in response.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the participants of a thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<PagedResponse<ChatParticipant>> listChatParticipantsSinglePageAsync(
        String chatThreadId, Integer maxPageSize, Integer skip, RequestContext requestContext) {
        final String accept = "application/json";
        PagedResponseCompletableFuture<ChatParticipantsCollection, ChatParticipant> completableFuture =
            new PagedResponseCompletableFuture<>(
                response -> {
                    return new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null);
                });

        service.listChatParticipants(
            this.client.getEndpoint(),
            chatThreadId,
            maxPageSize,
            skip,
            this.client.getApiVersion(),
            accept,
            requestContext,
            completableFuture);
        return completableFuture;
    }

    /**
     * Gets the participants of a thread.
     *
     * @param chatThreadId Thread id to get participants for.
     * @param maxPageSize The maximum number of participants to be returned per page.
     * @param skip Skips participants up to a specified position in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the participants of a thread.
     */
    /**
     * Gets the participants of a thread.
     *
     * @param chatThreadId Thread id to get participants for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the participants of a thread.
     */
    /**
     * Gets the participants of a thread.
     *
     * @param chatThreadId Thread id to get participants for.
     * @param maxPageSize The maximum number of participants to be returned per page.
     * @param skip Skips participants up to a specified position in response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the participants of a thread.
     */
    /**
     * Gets the participants of a thread.
     *
     * @param chatThreadId Thread id to get participants for.
     * @param maxPageSize The maximum number of participants to be returned per page.
     * @param skip Skips participants up to a specified position in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the participants of a thread.
     */
    /**
     * Gets the participants of a thread.
     *
     * @param chatThreadId Thread id to get participants for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the participants of a thread.
     */
    /**
     * Gets the participants of a thread.
     *
     * @param chatThreadId Thread id to get participants for.
     * @param maxPageSize The maximum number of participants to be returned per page.
     * @param skip Skips participants up to a specified position in response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the participants of a thread.
     */
    /**
     * Remove a participant from a thread.
     *
     * @param chatThreadId Thread id to remove the participant from.
     * @param participantCommunicationIdentifier Id of the thread participant to remove from the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<Void>> removeChatParticipantWithResponseAsync(
        String chatThreadId, CommunicationIdentifierModel participantCommunicationIdentifier) {
        final String accept = "application/json";
        ResponseCompletableFuture<Void> completableFuture = new ResponseCompletableFuture<>();
        service.removeChatParticipant(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            participantCommunicationIdentifier,
            accept,
            RequestContext.NONE,
            completableFuture);
        return completableFuture;
    }

    /**
     * Remove a participant from a thread.
     *
     * @param chatThreadId Thread id to remove the participant from.
     * @param participantCommunicationIdentifier Id of the thread participant to remove from the thread.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<Void>> removeChatParticipantWithResponseAsync(
        String chatThreadId, CommunicationIdentifierModel participantCommunicationIdentifier, RequestContext requestContext) {
        final String accept = "application/json";
        ResponseCompletableFuture<Void> completableFuture = new ResponseCompletableFuture<>();
        service.removeChatParticipant(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            participantCommunicationIdentifier,
            accept,
            requestContext,
            completableFuture);
        return completableFuture;
    }

    /**
     * Remove a participant from a thread.
     *
     * @param chatThreadId Thread id to remove the participant from.
     * @param participantCommunicationIdentifier Id of the thread participant to remove from the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Void> removeChatParticipantAsync(
        String chatThreadId, CommunicationIdentifierModel participantCommunicationIdentifier) {
        return removeChatParticipantWithResponseAsync(chatThreadId, participantCommunicationIdentifier)
            .thenApply(response -> response.getValue());
    }

    /**
     * Remove a participant from a thread.
     *
     * @param chatThreadId Thread id to remove the participant from.
     * @param participantCommunicationIdentifier Id of the thread participant to remove from the thread.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Void> removeChatParticipantAsync(
        String chatThreadId, CommunicationIdentifierModel participantCommunicationIdentifier, RequestContext requestContext) {
        return removeChatParticipantWithResponseAsync(chatThreadId, participantCommunicationIdentifier, requestContext)
            .thenApply(response -> response.getValue());
    }

    /**
     * Remove a participant from a thread.
     *
     * @param chatThreadId Thread id to remove the participant from.
     * @param participantCommunicationIdentifier Id of the thread participant to remove from the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeChatParticipant(
        String chatThreadId, CommunicationIdentifierModel participantCommunicationIdentifier) {
        try {
            removeChatParticipantAsync(chatThreadId, participantCommunicationIdentifier).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Remove a participant from a thread.
     *
     * @param chatThreadId Thread id to remove the participant from.
     * @param participantCommunicationIdentifier Id of the thread participant to remove from the thread.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeChatParticipantWithResponse(
        String chatThreadId, CommunicationIdentifierModel participantCommunicationIdentifier, RequestContext requestContext) {
        try {
            return removeChatParticipantWithResponseAsync(chatThreadId, participantCommunicationIdentifier, requestContext)
                .get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Adds thread participants to a thread. If participants already exist, no change occurs.
     *
     * @param chatThreadId Id of the thread to add participants to.
     * @param addChatParticipantsRequest Thread participants to be added to the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<AddChatParticipantsResult>> addChatParticipantsWithResponseAsync(
        String chatThreadId, AddChatParticipantsOptions addChatParticipantsRequest) {
        final String accept = "application/json";
        ResponseCompletableFuture<AddChatParticipantsResult> completableFuture = new ResponseCompletableFuture<>();
        service.addChatParticipants(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            addChatParticipantsRequest,
            accept,
            RequestContext.NONE,
            completableFuture);
        return completableFuture;
    }

    /**
     * Adds thread participants to a thread. If participants already exist, no change occurs.
     *
     * @param chatThreadId Id of the thread to add participants to.
     * @param addChatParticipantsRequest Thread participants to be added to the thread.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<AddChatParticipantsResult>> addChatParticipantsWithResponseAsync(
        String chatThreadId, AddChatParticipantsOptions addChatParticipantsRequest, RequestContext requestContext) {
        final String accept = "application/json";
        ResponseCompletableFuture<AddChatParticipantsResult> completableFuture = new ResponseCompletableFuture<>();
        service.addChatParticipants(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            addChatParticipantsRequest,
            accept,
            requestContext,
            completableFuture);
        return completableFuture;
    }

    /**
     * Adds thread participants to a thread. If participants already exist, no change occurs.
     *
     * @param chatThreadId Id of the thread to add participants to.
     * @param addChatParticipantsRequest Thread participants to be added to the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the add chat participants operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<AddChatParticipantsResult> addChatParticipantsAsync(
        String chatThreadId, AddChatParticipantsOptions addChatParticipantsRequest) {
        return addChatParticipantsWithResponseAsync(chatThreadId, addChatParticipantsRequest)
            .thenApply(response -> response.getValue());
    }

    /**
     * Adds thread participants to a thread. If participants already exist, no change occurs.
     *
     * @param chatThreadId Id of the thread to add participants to.
     * @param addChatParticipantsRequest Thread participants to be added to the thread.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the add chat participants operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<AddChatParticipantsResult> addChatParticipantsAsync(
        String chatThreadId, AddChatParticipantsOptions addChatParticipantsRequest, RequestContext requestContext) {
        return addChatParticipantsWithResponseAsync(chatThreadId, addChatParticipantsRequest, requestContext)
            .thenApply(response -> response.getValue());
    }

    /**
     * Adds thread participants to a thread. If participants already exist, no change occurs.
     *
     * @param chatThreadId Id of the thread to add participants to.
     * @param addChatParticipantsRequest Thread participants to be added to the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the add chat participants operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddChatParticipantsResult addChatParticipants(
        String chatThreadId, AddChatParticipantsOptions addChatParticipantsRequest) {
        try {
            return addChatParticipantsAsync(chatThreadId, addChatParticipantsRequest).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Adds thread participants to a thread. If participants already exist, no change occurs.
     *
     * @param chatThreadId Id of the thread to add participants to.
     * @param addChatParticipantsRequest Thread participants to be added to the thread.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the add chat participants operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AddChatParticipantsResult> addChatParticipantsWithResponse(
        String chatThreadId, AddChatParticipantsOptions addChatParticipantsRequest, RequestContext requestContext) {
        try {
            return addChatParticipantsWithResponseAsync(chatThreadId, addChatParticipantsRequest, requestContext).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Updates a thread's properties.
     *
     * @param chatThreadId The id of the thread to update.
     * @param updateChatThreadRequest Request payload for updating a chat thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<Void>> updateChatThreadPropertiesWithResponseAsync(
        String chatThreadId, UpdateChatThreadOptions updateChatThreadRequest) {
        final String accept = "application/json";
        ResponseCompletableFuture<Void> completableFuture = new ResponseCompletableFuture<>();
        service.updateChatThreadProperties(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            updateChatThreadRequest,
            accept,
            RequestContext.NONE,
            completableFuture);
        return completableFuture;
    }

    /**
     * Updates a thread's properties.
     *
     * @param chatThreadId The id of the thread to update.
     * @param updateChatThreadRequest Request payload for updating a chat thread.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<Void>> updateChatThreadPropertiesWithResponseAsync(
        String chatThreadId, UpdateChatThreadOptions updateChatThreadRequest, RequestContext requestContext) {
        final String accept = "application/json";
        ResponseCompletableFuture<Void> completableFuture = new ResponseCompletableFuture<>();
        service.updateChatThreadProperties(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            updateChatThreadRequest,
            accept,
            requestContext,
            completableFuture);
        return completableFuture;
    }

    /**
     * Updates a thread's properties.
     *
     * @param chatThreadId The id of the thread to update.
     * @param updateChatThreadRequest Request payload for updating a chat thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Void> updateChatThreadPropertiesAsync(
        String chatThreadId, UpdateChatThreadOptions updateChatThreadRequest) {
        return updateChatThreadPropertiesWithResponseAsync(chatThreadId, updateChatThreadRequest)
            .thenApply(response -> response.getValue());
    }

    /**
     * Updates a thread's properties.
     *
     * @param chatThreadId The id of the thread to update.
     * @param updateChatThreadRequest Request payload for updating a chat thread.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Void> updateChatThreadPropertiesAsync(
        String chatThreadId, UpdateChatThreadOptions updateChatThreadRequest, RequestContext requestContext) {
        return updateChatThreadPropertiesWithResponseAsync(chatThreadId, updateChatThreadRequest, requestContext)
            .thenApply(response -> response.getValue());
    }

    /**
     * Updates a thread's properties.
     *
     * @param chatThreadId The id of the thread to update.
     * @param updateChatThreadRequest Request payload for updating a chat thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateChatThreadProperties(String chatThreadId, UpdateChatThreadOptions updateChatThreadRequest) {
        try {
            updateChatThreadPropertiesAsync(chatThreadId, updateChatThreadRequest).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Updates a thread's properties.
     *
     * @param chatThreadId The id of the thread to update.
     * @param updateChatThreadRequest Request payload for updating a chat thread.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateChatThreadPropertiesWithResponse(
        String chatThreadId, UpdateChatThreadOptions updateChatThreadRequest, RequestContext requestContext) {
        try {
            return updateChatThreadPropertiesWithResponseAsync(chatThreadId, updateChatThreadRequest, requestContext).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Gets a chat thread's properties.
     *
     * @param chatThreadId Id of the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<ChatThreadProperties>> getChatThreadPropertiesWithResponseAsync(
        String chatThreadId) {
        final String accept = "application/json";
        ResponseCompletableFuture<ChatThreadProperties> completableFuture = new ResponseCompletableFuture<>();
        service.getChatThreadProperties(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            accept,
            RequestContext.NONE,
            completableFuture);
        return completableFuture;
    }

    /**
     * Gets a chat thread's properties.
     *
     * @param chatThreadId Id of the thread.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<ChatThreadProperties>> getChatThreadPropertiesWithResponseAsync(
        String chatThreadId, RequestContext requestContext) {
        final String accept = "application/json";
        ResponseCompletableFuture<ChatThreadProperties> completableFuture = new ResponseCompletableFuture<>();
        service.getChatThreadProperties(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            accept,
            requestContext,
            completableFuture);
        return completableFuture;
    }

    /**
     * Gets a chat thread's properties.
     *
     * @param chatThreadId Id of the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a chat thread's properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<ChatThreadProperties> getChatThreadPropertiesAsync(String chatThreadId) {
        return getChatThreadPropertiesWithResponseAsync(chatThreadId).thenApply(response -> response.getValue());
    }

    /**
     * Gets a chat thread's properties.
     *
     * @param chatThreadId Id of the thread.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a chat thread's properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<ChatThreadProperties> getChatThreadPropertiesAsync(String chatThreadId, RequestContext requestContext) {
        return getChatThreadPropertiesWithResponseAsync(chatThreadId, requestContext)
            .thenApply(response -> response.getValue());
    }

    /**
     * Gets a chat thread's properties.
     *
     * @param chatThreadId Id of the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a chat thread's properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChatThreadProperties getChatThreadProperties(String chatThreadId) {
        try {
            return getChatThreadPropertiesAsync(chatThreadId).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Gets a chat thread's properties.
     *
     * @param chatThreadId Id of the thread.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a chat thread's properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ChatThreadProperties> getChatThreadPropertiesWithResponse(String chatThreadId, RequestContext requestContext) {
        try {
            return getChatThreadPropertiesWithResponseAsync(chatThreadId, requestContext).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Posts a typing event to a thread, on behalf of a user.
     *
     * @param chatThreadId Id of the thread.
     * @param sendTypingNotificationRequest Details of the typing notification request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<Void>> sendTypingNotificationWithResponseAsync(
        String chatThreadId, TypingNotificationOptions sendTypingNotificationRequest) {
        final String accept = "application/json";
        ResponseCompletableFuture<Void> completableFuture = new ResponseCompletableFuture<>();
        service.sendTypingNotification(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            sendTypingNotificationRequest,
            accept,
            RequestContext.NONE,
            completableFuture);
        return completableFuture;
    }

    /**
     * Posts a typing event to a thread, on behalf of a user.
     *
     * @param chatThreadId Id of the thread.
     * @param sendTypingNotificationRequest Details of the typing notification request.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Response<Void>> sendTypingNotificationWithResponseAsync(
        String chatThreadId, TypingNotificationOptions sendTypingNotificationRequest, RequestContext requestContext) {
        final String accept = "application/json";
        ResponseCompletableFuture<Void> completableFuture = new ResponseCompletableFuture<>();
        service.sendTypingNotification(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            sendTypingNotificationRequest,
            accept,
            requestContext,
            completableFuture);
        return completableFuture;
    }

    /**
     * Posts a typing event to a thread, on behalf of a user.
     *
     * @param chatThreadId Id of the thread.
     * @param sendTypingNotificationRequest Details of the typing notification request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Void> sendTypingNotificationAsync(
        String chatThreadId, TypingNotificationOptions sendTypingNotificationRequest) {
        return sendTypingNotificationWithResponseAsync(chatThreadId, sendTypingNotificationRequest)
            .thenApply(response -> response.getValue());
    }

    /**
     * Posts a typing event to a thread, on behalf of a user.
     *
     * @param chatThreadId Id of the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Void> sendTypingNotificationAsync(String chatThreadId) {
        final TypingNotificationOptions sendTypingNotificationRequest = null;
        return sendTypingNotificationWithResponseAsync(chatThreadId, sendTypingNotificationRequest)
            .thenApply(response -> response.getValue());
    }

    /**
     * Posts a typing event to a thread, on behalf of a user.
     *
     * @param chatThreadId Id of the thread.
     * @param sendTypingNotificationRequest Details of the typing notification request.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<Void> sendTypingNotificationAsync(
        String chatThreadId, TypingNotificationOptions sendTypingNotificationRequest, RequestContext requestContext) {
        return sendTypingNotificationWithResponseAsync(chatThreadId, sendTypingNotificationRequest, requestContext)
            .thenApply(response -> response.getValue());
    }

    /**
     * Posts a typing event to a thread, on behalf of a user.
     *
     * @param chatThreadId Id of the thread.
     * @param sendTypingNotificationRequest Details of the typing notification request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendTypingNotification(String chatThreadId, TypingNotificationOptions sendTypingNotificationRequest) {
        try {
            sendTypingNotificationAsync(chatThreadId, sendTypingNotificationRequest).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Posts a typing event to a thread, on behalf of a user.
     *
     * @param chatThreadId Id of the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendTypingNotification(String chatThreadId) {
        final TypingNotificationOptions sendTypingNotificationRequest = null;
        try {
            sendTypingNotificationAsync(chatThreadId, sendTypingNotificationRequest).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Posts a typing event to a thread, on behalf of a user.
     *
     * @param chatThreadId Id of the thread.
     * @param sendTypingNotificationRequest Details of the typing notification request.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> sendTypingNotificationWithResponse(
        String chatThreadId, TypingNotificationOptions sendTypingNotificationRequest, RequestContext requestContext) {
        try {
            return sendTypingNotificationWithResponseAsync(chatThreadId, sendTypingNotificationRequest, requestContext).get();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged collection of chat message read receipts.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<PagedResponse<ChatMessageReadReceipt>> listChatReadReceiptsNextSinglePageAsync(
        String nextLink) {
        final String accept = "application/json";
        PagedResponseCompletableFuture<ChatMessageReadReceiptsCollection, ChatMessageReadReceipt> completableFuture =
            new PagedResponseCompletableFuture<>(
                response -> {
                    return new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null);
                });

        service.listChatReadReceiptsNext(nextLink, this.client.getEndpoint(), accept, RequestContext.NONE, completableFuture);
        return completableFuture;
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged collection of chat message read receipts.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<PagedResponse<ChatMessageReadReceipt>> listChatReadReceiptsNextSinglePageAsync(
        String nextLink, RequestContext requestContext) {
        final String accept = "application/json";
        PagedResponseCompletableFuture<ChatMessageReadReceiptsCollection, ChatMessageReadReceipt> completableFuture =
            new PagedResponseCompletableFuture<>(
                response -> {
                    return new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null);
                });

        service.listChatReadReceiptsNext(nextLink, this.client.getEndpoint(), accept, requestContext, completableFuture);
        return completableFuture;
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of chat messages for a particular chat thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<PagedResponse<ChatMessage>> listChatMessagesNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        PagedResponseCompletableFuture<ChatMessagesCollection, ChatMessage> completableFuture =
            new PagedResponseCompletableFuture<>(
                response -> {
                    return new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null);
                });

        service.listChatMessagesNext(nextLink, this.client.getEndpoint(), accept, RequestContext.NONE, completableFuture);
        return completableFuture;
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of chat messages for a particular chat thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<PagedResponse<ChatMessage>> listChatMessagesNextSinglePageAsync(
        String nextLink, RequestContext requestContext) {
        final String accept = "application/json";
        PagedResponseCompletableFuture<ChatMessagesCollection, ChatMessage> completableFuture =
            new PagedResponseCompletableFuture<>(
                response -> {
                    return new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null);
                });

        service.listChatMessagesNext(nextLink, this.client.getEndpoint(), accept, requestContext, completableFuture);
        return completableFuture;
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of participants belong to a particular thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<PagedResponse<ChatParticipant>> listChatParticipantsNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        PagedResponseCompletableFuture<ChatParticipantsCollection, ChatParticipant> completableFuture =
            new PagedResponseCompletableFuture<>(
                response -> {
                    return new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null);
                });

        service.listChatParticipantsNext(nextLink, this.client.getEndpoint(), accept, RequestContext.NONE, completableFuture);
        return completableFuture;
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param requestContext The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of participants belong to a particular thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompletableFuture<PagedResponse<ChatParticipant>> listChatParticipantsNextSinglePageAsync(
        String nextLink, RequestContext requestContext) {
        final String accept = "application/json";
        PagedResponseCompletableFuture<ChatParticipantsCollection, ChatParticipant> completableFuture =
            new PagedResponseCompletableFuture<>(
                response -> {
                    return new PagedResponseBase<>(
                        response.getRequest(),
                        response.getStatusCode(),
                        response.getHeaders(),
                        response.getValue().getValue(),
                        response.getValue().getNextLink(),
                        null);
                });

        service.listChatParticipantsNext(nextLink, this.client.getEndpoint(), accept, requestContext, completableFuture);
        return completableFuture;
    }

    private static final class ResponseCompletableFuture<T> extends CompletableFuture<Response<T>>
        implements Callback<Response<T>> {
        @Override
        public void onSuccess(Response<T> response) {
            this.complete(response);
        }

        @Override
        public void onFailure(Throwable error) {
            this.completeExceptionally(error);
        }
    }

    private static final class PagedResponseCompletableFuture<P, T> extends CompletableFuture<PagedResponse<T>>
        implements Callback<Response<P>> {
        private final Function<Response<P>, PagedResponse<T>> converter;

        PagedResponseCompletableFuture(Function<Response<P>, PagedResponse<T>> converter) {
            this.converter = converter;
        }

        @Override
        public void onSuccess(Response<P> response) {
            this.complete(this.converter.apply(response));
        }

        @Override
        public void onFailure(Throwable error) {
            this.completeExceptionally(error);
        }
    }
}
