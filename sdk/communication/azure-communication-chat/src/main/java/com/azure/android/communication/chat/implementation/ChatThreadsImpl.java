// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.android.communication.chat.implementation;

import com.azure.android.communication.chat.models.AddChatParticipantsRequest;
import com.azure.android.communication.chat.models.AddChatParticipantsResult;
import com.azure.android.communication.chat.models.ChatMessage;
import com.azure.android.communication.chat.models.ChatMessageReadReceipt;
import com.azure.android.communication.chat.models.ChatMessageReadReceiptsCollection;
import com.azure.android.communication.chat.models.ChatMessagesCollection;
import com.azure.android.communication.chat.models.ChatParticipant;
import com.azure.android.communication.chat.models.ChatParticipantsCollection;
import com.azure.android.communication.chat.models.ErrorException;
import com.azure.android.communication.chat.models.SendChatMessageRequest;
import com.azure.android.communication.chat.models.SendChatMessageResult;
import com.azure.android.communication.chat.models.SendReadReceiptRequest;
import com.azure.android.communication.chat.models.UpdateChatMessageRequest;
import com.azure.android.communication.chat.models.UpdateChatThreadRequest;
import com.azure.android.core.http.Callback;
import com.azure.android.core.http.Response;
import com.azure.android.core.http.exception.HttpResponseException;
import com.azure.android.core.http.responsepaging.AsyncPagedDataCollection;
import com.azure.android.core.http.responsepaging.AsyncPagedDataRetriever;
import com.azure.android.core.http.responsepaging.PagedDataResponseCollection;
import com.azure.android.core.http.responsepaging.PagedDataResponseRetriever;
import com.azure.android.core.internal.util.serializer.SerializerFormat;
import com.azure.android.core.util.paging.Page;
import com.azure.android.core.util.paging.PagedDataCollection;
import com.azure.android.core.util.paging.PagedDataRetriever;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import org.threeten.bp.OffsetDateTime;
import retrofit2.Call;
import retrofit2.http.Body;
import retrofit2.http.DELETE;
import retrofit2.http.GET;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;

/**
 * An instance of this class provides access to all the operations defined in
 * ChatThreads.
 */
public final class ChatThreadsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ChatThreadsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureCommunicationChatServiceImpl client;

    /**
     * Initializes an instance of ChatThreadsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ChatThreadsImpl(AzureCommunicationChatServiceImpl client) {
        this.client = client;
        this.service = this.client.getServiceClient().getRetrofit().create(ChatThreadsService.class);
    }

    /**
     * The interface defining all the services for
     * AzureCommunicationChatServiceChatThreads to be used by the proxy service
     * to perform REST calls.
     */
    private interface ChatThreadsService {
        @GET("/chat/threads/{chatThreadId}/readReceipts")
        Call<ResponseBody> listChatReadReceipts(@Path("chatThreadId") String chatThreadId, @Query("maxPageSize") Integer maxPageSize, @Query("skip") Integer skip, @Query("api-version") String apiVersion);

        @POST("/chat/threads/{chatThreadId}/readReceipts")
        Call<ResponseBody> sendChatReadReceipt(@Path("chatThreadId") String chatThreadId, @Query("api-version") String apiVersion, @Body RequestBody sendReadReceiptRequest);

        @POST("/chat/threads/{chatThreadId}/messages")
        Call<ResponseBody> sendChatMessage(@Path("chatThreadId") String chatThreadId, @Query("api-version") String apiVersion, @Body RequestBody sendChatMessageRequest);

        @GET("/chat/threads/{chatThreadId}/messages")
        Call<ResponseBody> listChatMessages(@Path("chatThreadId") String chatThreadId, @Query("maxPageSize") Integer maxPageSize, @Query("startTime") OffsetDateTime startTime, @Query("api-version") String apiVersion);

        @GET("/chat/threads/{chatThreadId}/messages/{chatMessageId}")
        Call<ResponseBody> getChatMessage(@Path("chatThreadId") String chatThreadId, @Path("chatMessageId") String chatMessageId, @Query("api-version") String apiVersion);

        @PATCH("/chat/threads/{chatThreadId}/messages/{chatMessageId}")
        Call<ResponseBody> updateChatMessage(@Path("chatThreadId") String chatThreadId, @Path("chatMessageId") String chatMessageId, @Query("api-version") String apiVersion, @Body RequestBody updateChatMessageRequest);

        @DELETE("/chat/threads/{chatThreadId}/messages/{chatMessageId}")
        Call<ResponseBody> deleteChatMessage(@Path("chatThreadId") String chatThreadId, @Path("chatMessageId") String chatMessageId, @Query("api-version") String apiVersion);

        @POST("/chat/threads/{chatThreadId}/typing")
        Call<ResponseBody> sendTypingNotification(@Path("chatThreadId") String chatThreadId, @Query("api-version") String apiVersion);

        @GET("/chat/threads/{chatThreadId}/participants")
        Call<ResponseBody> listChatParticipants(@Path("chatThreadId") String chatThreadId, @Query("maxPageSize") Integer maxPageSize, @Query("skip") Integer skip, @Query("api-version") String apiVersion);

        @DELETE("/chat/threads/{chatThreadId}/participants/{chatParticipantId}")
        Call<ResponseBody> removeChatParticipant(@Path("chatThreadId") String chatThreadId, @Path("chatParticipantId") String chatParticipantId, @Query("api-version") String apiVersion);

        @POST("/chat/threads/{chatThreadId}/participants/:add")
        Call<ResponseBody> addChatParticipants(@Path("chatThreadId") String chatThreadId, @Query("api-version") String apiVersion, @Body RequestBody addChatParticipantsRequest);

        @PATCH("/chat/threads/{chatThreadId}")
        Call<ResponseBody> updateChatThread(@Path("chatThreadId") String chatThreadId, @Query("api-version") String apiVersion, @Body RequestBody updateChatThreadRequest);

        @GET("{nextLink}")
        Call<ResponseBody> listChatReadReceiptsNext(@Path(value = "nextLink", encoded = true) String nextLink);

        @GET("{nextLink}")
        Call<ResponseBody> listChatMessagesNext(@Path(value = "nextLink", encoded = true) String nextLink);

        @GET("{nextLink}")
        Call<ResponseBody> listChatParticipantsNext(@Path(value = "nextLink", encoded = true) String nextLink);
    }

    /**
     * Gets chat message read receipts for a thread.
     * 
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.
     * @param skip Skips chat message read receipts up to a specified position in response.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void listChatReadReceipts(String chatThreadId, Integer maxPageSize, Integer skip, final Callback<Page<ChatMessageReadReceipt>> callback) {
        Call<ResponseBody> call = service.listChatReadReceipts(chatThreadId, maxPageSize, skip, this.client.getApiVersion());
        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {
                if (response.isSuccessful()) {
                    if (response.code() == 200) {
                        final ChatMessageReadReceiptsCollection decodedResult;
                        try {
                            decodedResult = client.deserializeContent(response.headers(), response.body(), ChatMessageReadReceiptsCollection.class);
                        } catch(Exception ex) {
                            callback.onFailure(ex, response.raw());
                            return;
                        }
                        callback.onSuccess(new Page<ChatMessageReadReceipt>(response.raw().request().url().toString(), decodedResult.getValue(), decodedResult.getNextLink()), response.raw());
                    } else {
                        final String strContent = client.readAsString(response.body());
                        callback.onFailure(new ErrorException(strContent, response.raw()), response.raw());
                    }
                } else {
                    final String strContent = client.readAsString(response.errorBody());
                    callback.onFailure(new HttpResponseException(strContent, response.raw()), response.raw());
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                callback.onFailure(t, null);
            }
        };
        call.enqueue(retrofitCallback);
    }

    /**
     * Gets chat message read receipts for a thread.
     * 
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ChatMessageReadReceipt>> callback) {
        final Integer maxPageSize = null;
        final Integer skip = null;
        listChatReadReceipts(chatThreadId, maxPageSize, skip, callback);
    }

    /**
     * Gets chat message read receipts for a thread.
     * 
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.
     * @param skip Skips chat message read receipts up to a specified position in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chat message read receipts for a thread.
     */
    public Response<Page<ChatMessageReadReceipt>> listChatReadReceiptsWithRestResponse(String chatThreadId, Integer maxPageSize, Integer skip) {
        final retrofit2.Response<ResponseBody> response = this.client.executeRetrofitCall(service.listChatReadReceipts(chatThreadId, maxPageSize, skip, this.client.getApiVersion()));
        if (response.isSuccessful()) {
            if (response.code() == 200) {
                final ChatMessageReadReceiptsCollection decodedResult;
                try {
                    decodedResult = this.client.deserializeContent(response.headers(), response.body(), ChatMessageReadReceiptsCollection.class);
                } catch(Exception ex) {
                    final String strContent = this.client.readAsString(response.body());
                    throw new ErrorException(strContent, response.raw());
                }
                return new Response<>(response.raw().request(),
                                        response.code(),
                                        response.headers(),
                                        new Page<ChatMessageReadReceipt>(response.raw().request().url().toString(), decodedResult.getValue(), decodedResult.getNextLink()));
            } else {
                final String strContent = this.client.readAsString(response.body());
                throw new ErrorException(strContent, response.raw());
            }
        } else {
            final String strContent = this.client.readAsString(response.errorBody());
            throw new HttpResponseException(strContent, response.raw());
        }
    }

    private static final class ListChatReadReceiptsWithPageResponseRetriever extends PagedDataResponseRetriever<ChatMessageReadReceipt, Page<ChatMessageReadReceipt>> {
        private final String chatThreadId;

        private final Integer maxPageSize;

        private final Integer skip;

        private final ChatThreadsImpl serviceClient;

        public ListChatReadReceiptsWithPageResponseRetriever(String chatThreadId, Integer maxPageSize, Integer skip, ChatThreadsImpl serviceClient) {
            this.chatThreadId = chatThreadId;
            this.maxPageSize = maxPageSize;
            this.skip = skip;
            this.serviceClient = serviceClient;
        }

        public Response<Page<ChatMessageReadReceipt>> getFirstPage() {
             return serviceClient.listChatReadReceiptsWithRestResponse(chatThreadId, maxPageSize, skip);
        }

        public Response<Page<ChatMessageReadReceipt>> getPage(String nextLink) {
             return serviceClient.listChatReadReceiptsNextWithRestResponse(nextLink);
        }
    }

    /**
     * Gets chat message read receipts for a thread.
     * 
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.
     * @param skip Skips chat message read receipts up to a specified position in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chat message read receipts for a thread.
     */
    public PagedDataResponseCollection<ChatMessageReadReceipt, Page<ChatMessageReadReceipt>> listChatReadReceiptsWithPageResponse(String chatThreadId, Integer maxPageSize, Integer skip) {
        ListChatReadReceiptsWithPageResponseRetriever retriever = new ListChatReadReceiptsWithPageResponseRetriever(chatThreadId, maxPageSize, skip, this);
        return new PagedDataResponseCollection<ChatMessageReadReceipt, Page<ChatMessageReadReceipt>>(retriever);
    }

    private static final class ListChatReadReceiptsWithPageRetriever extends PagedDataRetriever<ChatMessageReadReceipt, Page<ChatMessageReadReceipt>> {
        private final String chatThreadId;

        private final Integer maxPageSize;

        private final Integer skip;

        private final ChatThreadsImpl serviceClient;

        public ListChatReadReceiptsWithPageRetriever(String chatThreadId, Integer maxPageSize, Integer skip, ChatThreadsImpl serviceClient) {
            this.chatThreadId = chatThreadId;
            this.maxPageSize = maxPageSize;
            this.skip = skip;
            this.serviceClient = serviceClient;
        }

        public Page<ChatMessageReadReceipt> getFirstPage() {
             return serviceClient.listChatReadReceiptsWithRestResponse(chatThreadId, maxPageSize, skip).getValue();
        }

        public Page<ChatMessageReadReceipt> getPage(String nextLink) {
             return serviceClient.listChatReadReceiptsNextWithRestResponse(nextLink).getValue();
        }
    }

    /**
     * Gets chat message read receipts for a thread.
     * 
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.
     * @param skip Skips chat message read receipts up to a specified position in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chat message read receipts for a thread.
     */
    public PagedDataCollection<ChatMessageReadReceipt, Page<ChatMessageReadReceipt>> listChatReadReceiptsWithPage(String chatThreadId, Integer maxPageSize, Integer skip) {
        ListChatReadReceiptsWithPageRetriever retriever = new ListChatReadReceiptsWithPageRetriever(chatThreadId, maxPageSize, skip, this);
        return new PagedDataCollection<ChatMessageReadReceipt, Page<ChatMessageReadReceipt>>(retriever);
    }

    /**
     * Gets chat message read receipts for a thread.
     * 
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return chat message read receipts for a thread.
     */
    public Page<ChatMessageReadReceipt> listChatReadReceipts(String chatThreadId) {
        final Integer maxPageSize = null;
        final Integer skip = null;
        return listChatReadReceiptsWithRestResponse(chatThreadId, maxPageSize, skip).getValue();
    }

    private static final class ListChatReadReceiptsPagesAsyncRetriever extends AsyncPagedDataRetriever<ChatMessageReadReceipt, Page<ChatMessageReadReceipt>> {
        private final String chatThreadId;

        private final Integer maxPageSize;

        private final Integer skip;

        private final ChatThreadsImpl serviceClient;

        public ListChatReadReceiptsPagesAsyncRetriever(String chatThreadId, Integer maxPageSize, Integer skip, ChatThreadsImpl serviceClient) {
            this.chatThreadId = chatThreadId;
            this.maxPageSize = maxPageSize;
            this.skip = skip;
            this.serviceClient = serviceClient;
        }

        public void getFirstPage(Callback<Page<ChatMessageReadReceipt>> callback) {
            serviceClient.listChatReadReceipts(chatThreadId, maxPageSize, skip, callback);
        }

        public void getPage(String nextLink, Callback<Page<ChatMessageReadReceipt>> callback) {
            serviceClient.listChatReadReceiptsNext(nextLink, callback);
        }
    }

    /**
     * Gets chat message read receipts for a thread.
     * 
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.
     * @param skip Skips chat message read receipts up to a specified position in response.
     * @param callback the Callback that receives the response collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void listChatReadReceiptsPagesAsync(String chatThreadId, Integer maxPageSize, Integer skip, final Callback<AsyncPagedDataCollection<ChatMessageReadReceipt, Page<ChatMessageReadReceipt>>> callback) {
        ListChatReadReceiptsPagesAsyncRetriever retriever = new ListChatReadReceiptsPagesAsyncRetriever(chatThreadId, maxPageSize, skip, this);
        callback.onSuccess(new AsyncPagedDataCollection<ChatMessageReadReceipt, Page<ChatMessageReadReceipt>>(retriever), null);
    }

    /**
     * Sends a read receipt event to a thread, on behalf of a user.
     * 
     * @param chatThreadId Thread id to send the read receipt event to.
     * @param sendReadReceiptRequest Request payload for sending a read receipt.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest sendReadReceiptRequest, final Callback<Void> callback) {
        final okhttp3.RequestBody okHttp3RequestBody;
        try {
            okHttp3RequestBody = RequestBody.create(okhttp3.MediaType.get("application/json"), client.serializerAdapter.serialize(sendReadReceiptRequest, client.resolveSerializerFormat("application/json")));
        } catch(java.io.IOException ioe) {
            callback.onFailure(new RuntimeException(ioe), null);
            return;
        }
        Call<ResponseBody> call = service.sendChatReadReceipt(chatThreadId, this.client.getApiVersion(), okHttp3RequestBody);
        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {
                if (response.isSuccessful()) {
                    if (response.code() == 200) {
                        final Void decodedResult;
                        try {
                            decodedResult = client.deserializeContent(response.headers(), response.body(), Void.class);
                        } catch(Exception ex) {
                            callback.onFailure(ex, response.raw());
                            return;
                        }
                        callback.onSuccess(decodedResult, response.raw());
                    } else {
                        final String strContent = client.readAsString(response.body());
                        callback.onFailure(new ErrorException(strContent, response.raw()), response.raw());
                    }
                } else {
                    final String strContent = client.readAsString(response.errorBody());
                    callback.onFailure(new HttpResponseException(strContent, response.raw()), response.raw());
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                callback.onFailure(t, null);
            }
        };
        call.enqueue(retrofitCallback);
    }

    /**
     * Sends a read receipt event to a thread, on behalf of a user.
     * 
     * @param chatThreadId Thread id to send the read receipt event to.
     * @param sendReadReceiptRequest Request payload for sending a read receipt.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    public Response<Void> sendChatReadReceiptWithRestResponse(String chatThreadId, SendReadReceiptRequest sendReadReceiptRequest) {
        final okhttp3.RequestBody okHttp3RequestBody;
        try {
            okHttp3RequestBody = RequestBody.create(okhttp3.MediaType.get("application/json"), this.client.serializerAdapter.serialize(sendReadReceiptRequest, this.client.resolveSerializerFormat("application/json")));
        } catch(java.io.IOException ioe) {
            throw new RuntimeException(ioe);
        }
        final retrofit2.Response<ResponseBody> response = this.client.executeRetrofitCall(service.sendChatReadReceipt(chatThreadId, this.client.getApiVersion(), okHttp3RequestBody));
        if (response.isSuccessful()) {
            if (response.code() == 200) {
                return new Response<>(response.raw().request(),
                                        response.code(),
                                        response.headers(),
                                        this.client.deserializeContent(response.headers(), response.body(), Void.class));
            } else {
                final String strContent = this.client.readAsString(response.body());
                throw new ErrorException(strContent, response.raw());
            }
        } else {
            final String strContent = this.client.readAsString(response.errorBody());
            throw new HttpResponseException(strContent, response.raw());
        }
    }

    /**
     * Sends a message to a thread.
     * 
     * @param chatThreadId The thread id to send the message to.
     * @param sendChatMessageRequest Details of the message to send.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void sendChatMessage(String chatThreadId, SendChatMessageRequest sendChatMessageRequest, final Callback<SendChatMessageResult> callback) {
        final okhttp3.RequestBody okHttp3RequestBody;
        try {
            okHttp3RequestBody = RequestBody.create(okhttp3.MediaType.get("application/json"), client.serializerAdapter.serialize(sendChatMessageRequest, client.resolveSerializerFormat("application/json")));
        } catch(java.io.IOException ioe) {
            callback.onFailure(new RuntimeException(ioe), null);
            return;
        }
        Call<ResponseBody> call = service.sendChatMessage(chatThreadId, this.client.getApiVersion(), okHttp3RequestBody);
        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {
                if (response.isSuccessful()) {
                    if (response.code() == 201) {
                        final SendChatMessageResult decodedResult;
                        try {
                            decodedResult = client.deserializeContent(response.headers(), response.body(), SendChatMessageResult.class);
                        } catch(Exception ex) {
                            callback.onFailure(ex, response.raw());
                            return;
                        }
                        callback.onSuccess(decodedResult, response.raw());
                    } else {
                        final String strContent = client.readAsString(response.body());
                        callback.onFailure(new ErrorException(strContent, response.raw()), response.raw());
                    }
                } else {
                    final String strContent = client.readAsString(response.errorBody());
                    callback.onFailure(new HttpResponseException(strContent, response.raw()), response.raw());
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                callback.onFailure(t, null);
            }
        };
        call.enqueue(retrofitCallback);
    }

    /**
     * Sends a message to a thread.
     * 
     * @param chatThreadId The thread id to send the message to.
     * @param sendChatMessageRequest Details of the message to send.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the send message operation.
     */
    public Response<SendChatMessageResult> sendChatMessageWithRestResponse(String chatThreadId, SendChatMessageRequest sendChatMessageRequest) {
        final okhttp3.RequestBody okHttp3RequestBody;
        try {
            okHttp3RequestBody = RequestBody.create(okhttp3.MediaType.get("application/json"), this.client.serializerAdapter.serialize(sendChatMessageRequest, this.client.resolveSerializerFormat("application/json")));
        } catch(java.io.IOException ioe) {
            throw new RuntimeException(ioe);
        }
        final retrofit2.Response<ResponseBody> response = this.client.executeRetrofitCall(service.sendChatMessage(chatThreadId, this.client.getApiVersion(), okHttp3RequestBody));
        if (response.isSuccessful()) {
            if (response.code() == 201) {
                return new Response<>(response.raw().request(),
                                        response.code(),
                                        response.headers(),
                                        this.client.deserializeContent(response.headers(), response.body(), SendChatMessageResult.class));
            } else {
                final String strContent = this.client.readAsString(response.body());
                throw new ErrorException(strContent, response.raw());
            }
        } else {
            final String strContent = this.client.readAsString(response.errorBody());
            throw new HttpResponseException(strContent, response.raw());
        }
    }

    /**
     * Gets a list of messages from a thread.
     * 
     * @param chatThreadId The thread id of the message.
     * @param maxPageSize The maximum number of messages to be returned per page.
     * @param startTime The earliest point in time to get messages up to. The timestamp should be in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void listChatMessages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatMessage>> callback) {
        Call<ResponseBody> call = service.listChatMessages(chatThreadId, maxPageSize, startTime, this.client.getApiVersion());
        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {
                if (response.isSuccessful()) {
                    if (response.code() == 200) {
                        final ChatMessagesCollection decodedResult;
                        try {
                            decodedResult = client.deserializeContent(response.headers(), response.body(), ChatMessagesCollection.class);
                        } catch(Exception ex) {
                            callback.onFailure(ex, response.raw());
                            return;
                        }
                        callback.onSuccess(new Page<ChatMessage>(response.raw().request().url().toString(), decodedResult.getValue(), decodedResult.getNextLink()), response.raw());
                    } else {
                        final String strContent = client.readAsString(response.body());
                        callback.onFailure(new ErrorException(strContent, response.raw()), response.raw());
                    }
                } else {
                    final String strContent = client.readAsString(response.errorBody());
                    callback.onFailure(new HttpResponseException(strContent, response.raw()), response.raw());
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                callback.onFailure(t, null);
            }
        };
        call.enqueue(retrofitCallback);
    }

    /**
     * Gets a list of messages from a thread.
     * 
     * @param chatThreadId The thread id of the message.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void listChatMessages(String chatThreadId, final Callback<Page<ChatMessage>> callback) {
        final Integer maxPageSize = null;
        final OffsetDateTime startTime = null;
        listChatMessages(chatThreadId, maxPageSize, startTime, callback);
    }

    /**
     * Gets a list of messages from a thread.
     * 
     * @param chatThreadId The thread id of the message.
     * @param maxPageSize The maximum number of messages to be returned per page.
     * @param startTime The earliest point in time to get messages up to. The timestamp should be in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of messages from a thread.
     */
    public Response<Page<ChatMessage>> listChatMessagesWithRestResponse(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime) {
        final retrofit2.Response<ResponseBody> response = this.client.executeRetrofitCall(service.listChatMessages(chatThreadId, maxPageSize, startTime, this.client.getApiVersion()));
        if (response.isSuccessful()) {
            if (response.code() == 200) {
                final ChatMessagesCollection decodedResult;
                try {
                    decodedResult = this.client.deserializeContent(response.headers(), response.body(), ChatMessagesCollection.class);
                } catch(Exception ex) {
                    final String strContent = this.client.readAsString(response.body());
                    throw new ErrorException(strContent, response.raw());
                }
                return new Response<>(response.raw().request(),
                                        response.code(),
                                        response.headers(),
                                        new Page<ChatMessage>(response.raw().request().url().toString(), decodedResult.getValue(), decodedResult.getNextLink()));
            } else {
                final String strContent = this.client.readAsString(response.body());
                throw new ErrorException(strContent, response.raw());
            }
        } else {
            final String strContent = this.client.readAsString(response.errorBody());
            throw new HttpResponseException(strContent, response.raw());
        }
    }

    private static final class ListChatMessagesWithPageResponseRetriever extends PagedDataResponseRetriever<ChatMessage, Page<ChatMessage>> {
        private final String chatThreadId;

        private final Integer maxPageSize;

        private final OffsetDateTime startTime;

        private final ChatThreadsImpl serviceClient;

        public ListChatMessagesWithPageResponseRetriever(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, ChatThreadsImpl serviceClient) {
            this.chatThreadId = chatThreadId;
            this.maxPageSize = maxPageSize;
            this.startTime = startTime;
            this.serviceClient = serviceClient;
        }

        public Response<Page<ChatMessage>> getFirstPage() {
             return serviceClient.listChatMessagesWithRestResponse(chatThreadId, maxPageSize, startTime);
        }

        public Response<Page<ChatMessage>> getPage(String nextLink) {
             return serviceClient.listChatMessagesNextWithRestResponse(nextLink);
        }
    }

    /**
     * Gets a list of messages from a thread.
     * 
     * @param chatThreadId The thread id of the message.
     * @param maxPageSize The maximum number of messages to be returned per page.
     * @param startTime The earliest point in time to get messages up to. The timestamp should be in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of messages from a thread.
     */
    public PagedDataResponseCollection<ChatMessage, Page<ChatMessage>> listChatMessagesWithPageResponse(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime) {
        ListChatMessagesWithPageResponseRetriever retriever = new ListChatMessagesWithPageResponseRetriever(chatThreadId, maxPageSize, startTime, this);
        return new PagedDataResponseCollection<ChatMessage, Page<ChatMessage>>(retriever);
    }

    private static final class ListChatMessagesWithPageRetriever extends PagedDataRetriever<ChatMessage, Page<ChatMessage>> {
        private final String chatThreadId;

        private final Integer maxPageSize;

        private final OffsetDateTime startTime;

        private final ChatThreadsImpl serviceClient;

        public ListChatMessagesWithPageRetriever(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, ChatThreadsImpl serviceClient) {
            this.chatThreadId = chatThreadId;
            this.maxPageSize = maxPageSize;
            this.startTime = startTime;
            this.serviceClient = serviceClient;
        }

        public Page<ChatMessage> getFirstPage() {
             return serviceClient.listChatMessagesWithRestResponse(chatThreadId, maxPageSize, startTime).getValue();
        }

        public Page<ChatMessage> getPage(String nextLink) {
             return serviceClient.listChatMessagesNextWithRestResponse(nextLink).getValue();
        }
    }

    /**
     * Gets a list of messages from a thread.
     * 
     * @param chatThreadId The thread id of the message.
     * @param maxPageSize The maximum number of messages to be returned per page.
     * @param startTime The earliest point in time to get messages up to. The timestamp should be in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of messages from a thread.
     */
    public PagedDataCollection<ChatMessage, Page<ChatMessage>> listChatMessagesWithPage(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime) {
        ListChatMessagesWithPageRetriever retriever = new ListChatMessagesWithPageRetriever(chatThreadId, maxPageSize, startTime, this);
        return new PagedDataCollection<ChatMessage, Page<ChatMessage>>(retriever);
    }

    /**
     * Gets a list of messages from a thread.
     * 
     * @param chatThreadId The thread id of the message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of messages from a thread.
     */
    public Page<ChatMessage> listChatMessages(String chatThreadId) {
        final Integer maxPageSize = null;
        final OffsetDateTime startTime = null;
        return listChatMessagesWithRestResponse(chatThreadId, maxPageSize, startTime).getValue();
    }

    private static final class ListChatMessagesPagesAsyncRetriever extends AsyncPagedDataRetriever<ChatMessage, Page<ChatMessage>> {
        private final String chatThreadId;

        private final Integer maxPageSize;

        private final OffsetDateTime startTime;

        private final ChatThreadsImpl serviceClient;

        public ListChatMessagesPagesAsyncRetriever(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, ChatThreadsImpl serviceClient) {
            this.chatThreadId = chatThreadId;
            this.maxPageSize = maxPageSize;
            this.startTime = startTime;
            this.serviceClient = serviceClient;
        }

        public void getFirstPage(Callback<Page<ChatMessage>> callback) {
            serviceClient.listChatMessages(chatThreadId, maxPageSize, startTime, callback);
        }

        public void getPage(String nextLink, Callback<Page<ChatMessage>> callback) {
            serviceClient.listChatMessagesNext(nextLink, callback);
        }
    }

    /**
     * Gets a list of messages from a thread.
     * 
     * @param chatThreadId The thread id of the message.
     * @param maxPageSize The maximum number of messages to be returned per page.
     * @param startTime The earliest point in time to get messages up to. The timestamp should be in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`.
     * @param callback the Callback that receives the response collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void listChatMessagesPagesAsync(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>> callback) {
        ListChatMessagesPagesAsyncRetriever retriever = new ListChatMessagesPagesAsyncRetriever(chatThreadId, maxPageSize, startTime, this);
        callback.onSuccess(new AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>(retriever), null);
    }

    /**
     * Gets a message by id.
     * 
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void getChatMessage(String chatThreadId, String chatMessageId, final Callback<ChatMessage> callback) {
        Call<ResponseBody> call = service.getChatMessage(chatThreadId, chatMessageId, this.client.getApiVersion());
        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {
                if (response.isSuccessful()) {
                    if (response.code() == 200) {
                        final ChatMessage decodedResult;
                        try {
                            decodedResult = client.deserializeContent(response.headers(), response.body(), ChatMessage.class);
                        } catch(Exception ex) {
                            callback.onFailure(ex, response.raw());
                            return;
                        }
                        callback.onSuccess(decodedResult, response.raw());
                    } else {
                        final String strContent = client.readAsString(response.body());
                        callback.onFailure(new ErrorException(strContent, response.raw()), response.raw());
                    }
                } else {
                    final String strContent = client.readAsString(response.errorBody());
                    callback.onFailure(new HttpResponseException(strContent, response.raw()), response.raw());
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                callback.onFailure(t, null);
            }
        };
        call.enqueue(retrofitCallback);
    }

    /**
     * Gets a message by id.
     * 
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a message by id.
     */
    public Response<ChatMessage> getChatMessageWithRestResponse(String chatThreadId, String chatMessageId) {
        final retrofit2.Response<ResponseBody> response = this.client.executeRetrofitCall(service.getChatMessage(chatThreadId, chatMessageId, this.client.getApiVersion()));
        if (response.isSuccessful()) {
            if (response.code() == 200) {
                return new Response<>(response.raw().request(),
                                        response.code(),
                                        response.headers(),
                                        this.client.deserializeContent(response.headers(), response.body(), ChatMessage.class));
            } else {
                final String strContent = this.client.readAsString(response.body());
                throw new ErrorException(strContent, response.raw());
            }
        } else {
            final String strContent = this.client.readAsString(response.errorBody());
            throw new HttpResponseException(strContent, response.raw());
        }
    }

    /**
     * Updates a message.
     * 
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param updateChatMessageRequest Request payload for updating a chat message.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void updateChatMessage(String chatThreadId, String chatMessageId, UpdateChatMessageRequest updateChatMessageRequest, final Callback<Void> callback) {
        final okhttp3.RequestBody okHttp3RequestBody;
        try {
            okHttp3RequestBody = RequestBody.create(okhttp3.MediaType.get("application/merge-patch+json"), client.serializerAdapter.serialize(updateChatMessageRequest, client.resolveSerializerFormat("application/merge-patch+json")));
        } catch(java.io.IOException ioe) {
            callback.onFailure(new RuntimeException(ioe), null);
            return;
        }
        Call<ResponseBody> call = service.updateChatMessage(chatThreadId, chatMessageId, this.client.getApiVersion(), okHttp3RequestBody);
        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {
                if (response.isSuccessful()) {
                    if (response.code() == 204) {
                        final Void decodedResult;
                        try {
                            decodedResult = client.deserializeContent(response.headers(), response.body(), Void.class);
                        } catch(Exception ex) {
                            callback.onFailure(ex, response.raw());
                            return;
                        }
                        callback.onSuccess(decodedResult, response.raw());
                    } else {
                        final String strContent = client.readAsString(response.body());
                        callback.onFailure(new ErrorException(strContent, response.raw()), response.raw());
                    }
                } else {
                    final String strContent = client.readAsString(response.errorBody());
                    callback.onFailure(new HttpResponseException(strContent, response.raw()), response.raw());
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                callback.onFailure(t, null);
            }
        };
        call.enqueue(retrofitCallback);
    }

    /**
     * Updates a message.
     * 
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param updateChatMessageRequest Request payload for updating a chat message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    public Response<Void> updateChatMessageWithRestResponse(String chatThreadId, String chatMessageId, UpdateChatMessageRequest updateChatMessageRequest) {
        final okhttp3.RequestBody okHttp3RequestBody;
        try {
            okHttp3RequestBody = RequestBody.create(okhttp3.MediaType.get("application/merge-patch+json"), this.client.serializerAdapter.serialize(updateChatMessageRequest, this.client.resolveSerializerFormat("application/merge-patch+json")));
        } catch(java.io.IOException ioe) {
            throw new RuntimeException(ioe);
        }
        final retrofit2.Response<ResponseBody> response = this.client.executeRetrofitCall(service.updateChatMessage(chatThreadId, chatMessageId, this.client.getApiVersion(), okHttp3RequestBody));
        if (response.isSuccessful()) {
            if (response.code() == 204) {
                return new Response<>(response.raw().request(),
                                        response.code(),
                                        response.headers(),
                                        this.client.deserializeContent(response.headers(), response.body(), Void.class));
            } else {
                final String strContent = this.client.readAsString(response.body());
                throw new ErrorException(strContent, response.raw());
            }
        } else {
            final String strContent = this.client.readAsString(response.errorBody());
            throw new HttpResponseException(strContent, response.raw());
        }
    }

    /**
     * Deletes a message.
     * 
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void deleteChatMessage(String chatThreadId, String chatMessageId, final Callback<Void> callback) {
        Call<ResponseBody> call = service.deleteChatMessage(chatThreadId, chatMessageId, this.client.getApiVersion());
        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {
                if (response.isSuccessful()) {
                    if (response.code() == 204) {
                        final Void decodedResult;
                        try {
                            decodedResult = client.deserializeContent(response.headers(), response.body(), Void.class);
                        } catch(Exception ex) {
                            callback.onFailure(ex, response.raw());
                            return;
                        }
                        callback.onSuccess(decodedResult, response.raw());
                    } else {
                        final String strContent = client.readAsString(response.body());
                        callback.onFailure(new ErrorException(strContent, response.raw()), response.raw());
                    }
                } else {
                    final String strContent = client.readAsString(response.errorBody());
                    callback.onFailure(new HttpResponseException(strContent, response.raw()), response.raw());
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                callback.onFailure(t, null);
            }
        };
        call.enqueue(retrofitCallback);
    }

    /**
     * Deletes a message.
     * 
     * @param chatThreadId The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    public Response<Void> deleteChatMessageWithRestResponse(String chatThreadId, String chatMessageId) {
        final retrofit2.Response<ResponseBody> response = this.client.executeRetrofitCall(service.deleteChatMessage(chatThreadId, chatMessageId, this.client.getApiVersion()));
        if (response.isSuccessful()) {
            if (response.code() == 204) {
                return new Response<>(response.raw().request(),
                                        response.code(),
                                        response.headers(),
                                        this.client.deserializeContent(response.headers(), response.body(), Void.class));
            } else {
                final String strContent = this.client.readAsString(response.body());
                throw new ErrorException(strContent, response.raw());
            }
        } else {
            final String strContent = this.client.readAsString(response.errorBody());
            throw new HttpResponseException(strContent, response.raw());
        }
    }

    /**
     * Posts a typing event to a thread, on behalf of a user.
     * 
     * @param chatThreadId Id of the thread.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void sendTypingNotification(String chatThreadId, final Callback<Void> callback) {
        Call<ResponseBody> call = service.sendTypingNotification(chatThreadId, this.client.getApiVersion());
        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {
                if (response.isSuccessful()) {
                    if (response.code() == 200) {
                        final Void decodedResult;
                        try {
                            decodedResult = client.deserializeContent(response.headers(), response.body(), Void.class);
                        } catch(Exception ex) {
                            callback.onFailure(ex, response.raw());
                            return;
                        }
                        callback.onSuccess(decodedResult, response.raw());
                    } else {
                        final String strContent = client.readAsString(response.body());
                        callback.onFailure(new ErrorException(strContent, response.raw()), response.raw());
                    }
                } else {
                    final String strContent = client.readAsString(response.errorBody());
                    callback.onFailure(new HttpResponseException(strContent, response.raw()), response.raw());
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                callback.onFailure(t, null);
            }
        };
        call.enqueue(retrofitCallback);
    }

    /**
     * Posts a typing event to a thread, on behalf of a user.
     * 
     * @param chatThreadId Id of the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    public Response<Void> sendTypingNotificationWithRestResponse(String chatThreadId) {
        final retrofit2.Response<ResponseBody> response = this.client.executeRetrofitCall(service.sendTypingNotification(chatThreadId, this.client.getApiVersion()));
        if (response.isSuccessful()) {
            if (response.code() == 200) {
                return new Response<>(response.raw().request(),
                                        response.code(),
                                        response.headers(),
                                        this.client.deserializeContent(response.headers(), response.body(), Void.class));
            } else {
                final String strContent = this.client.readAsString(response.body());
                throw new ErrorException(strContent, response.raw());
            }
        } else {
            final String strContent = this.client.readAsString(response.errorBody());
            throw new HttpResponseException(strContent, response.raw());
        }
    }

    /**
     * Gets the participants of a thread.
     * 
     * @param chatThreadId Thread id to get participants for.
     * @param maxPageSize The maximum number of participants to be returned per page.
     * @param skip Skips participants up to a specified position in response.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void listChatParticipants(String chatThreadId, Integer maxPageSize, Integer skip, final Callback<Page<ChatParticipant>> callback) {
        Call<ResponseBody> call = service.listChatParticipants(chatThreadId, maxPageSize, skip, this.client.getApiVersion());
        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {
                if (response.isSuccessful()) {
                    if (response.code() == 200) {
                        final ChatParticipantsCollection decodedResult;
                        try {
                            decodedResult = client.deserializeContent(response.headers(), response.body(), ChatParticipantsCollection.class);
                        } catch(Exception ex) {
                            callback.onFailure(ex, response.raw());
                            return;
                        }
                        callback.onSuccess(new Page<ChatParticipant>(response.raw().request().url().toString(), decodedResult.getValue(), decodedResult.getNextLink()), response.raw());
                    } else {
                        final String strContent = client.readAsString(response.body());
                        callback.onFailure(new ErrorException(strContent, response.raw()), response.raw());
                    }
                } else {
                    final String strContent = client.readAsString(response.errorBody());
                    callback.onFailure(new HttpResponseException(strContent, response.raw()), response.raw());
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                callback.onFailure(t, null);
            }
        };
        call.enqueue(retrofitCallback);
    }

    /**
     * Gets the participants of a thread.
     * 
     * @param chatThreadId Thread id to get participants for.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void listChatParticipants(String chatThreadId, final Callback<Page<ChatParticipant>> callback) {
        final Integer maxPageSize = null;
        final Integer skip = null;
        listChatParticipants(chatThreadId, maxPageSize, skip, callback);
    }

    /**
     * Gets the participants of a thread.
     * 
     * @param chatThreadId Thread id to get participants for.
     * @param maxPageSize The maximum number of participants to be returned per page.
     * @param skip Skips participants up to a specified position in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the participants of a thread.
     */
    public Response<Page<ChatParticipant>> listChatParticipantsWithRestResponse(String chatThreadId, Integer maxPageSize, Integer skip) {
        final retrofit2.Response<ResponseBody> response = this.client.executeRetrofitCall(service.listChatParticipants(chatThreadId, maxPageSize, skip, this.client.getApiVersion()));
        if (response.isSuccessful()) {
            if (response.code() == 200) {
                final ChatParticipantsCollection decodedResult;
                try {
                    decodedResult = this.client.deserializeContent(response.headers(), response.body(), ChatParticipantsCollection.class);
                } catch(Exception ex) {
                    final String strContent = this.client.readAsString(response.body());
                    throw new ErrorException(strContent, response.raw());
                }
                return new Response<>(response.raw().request(),
                                        response.code(),
                                        response.headers(),
                                        new Page<ChatParticipant>(response.raw().request().url().toString(), decodedResult.getValue(), decodedResult.getNextLink()));
            } else {
                final String strContent = this.client.readAsString(response.body());
                throw new ErrorException(strContent, response.raw());
            }
        } else {
            final String strContent = this.client.readAsString(response.errorBody());
            throw new HttpResponseException(strContent, response.raw());
        }
    }

    private static final class ListChatParticipantsWithPageResponseRetriever extends PagedDataResponseRetriever<ChatParticipant, Page<ChatParticipant>> {
        private final String chatThreadId;

        private final Integer maxPageSize;

        private final Integer skip;

        private final ChatThreadsImpl serviceClient;

        public ListChatParticipantsWithPageResponseRetriever(String chatThreadId, Integer maxPageSize, Integer skip, ChatThreadsImpl serviceClient) {
            this.chatThreadId = chatThreadId;
            this.maxPageSize = maxPageSize;
            this.skip = skip;
            this.serviceClient = serviceClient;
        }

        public Response<Page<ChatParticipant>> getFirstPage() {
             return serviceClient.listChatParticipantsWithRestResponse(chatThreadId, maxPageSize, skip);
        }

        public Response<Page<ChatParticipant>> getPage(String nextLink) {
             return serviceClient.listChatParticipantsNextWithRestResponse(nextLink);
        }
    }

    /**
     * Gets the participants of a thread.
     * 
     * @param chatThreadId Thread id to get participants for.
     * @param maxPageSize The maximum number of participants to be returned per page.
     * @param skip Skips participants up to a specified position in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the participants of a thread.
     */
    public PagedDataResponseCollection<ChatParticipant, Page<ChatParticipant>> listChatParticipantsWithPageResponse(String chatThreadId, Integer maxPageSize, Integer skip) {
        ListChatParticipantsWithPageResponseRetriever retriever = new ListChatParticipantsWithPageResponseRetriever(chatThreadId, maxPageSize, skip, this);
        return new PagedDataResponseCollection<ChatParticipant, Page<ChatParticipant>>(retriever);
    }

    private static final class ListChatParticipantsWithPageRetriever extends PagedDataRetriever<ChatParticipant, Page<ChatParticipant>> {
        private final String chatThreadId;

        private final Integer maxPageSize;

        private final Integer skip;

        private final ChatThreadsImpl serviceClient;

        public ListChatParticipantsWithPageRetriever(String chatThreadId, Integer maxPageSize, Integer skip, ChatThreadsImpl serviceClient) {
            this.chatThreadId = chatThreadId;
            this.maxPageSize = maxPageSize;
            this.skip = skip;
            this.serviceClient = serviceClient;
        }

        public Page<ChatParticipant> getFirstPage() {
             return serviceClient.listChatParticipantsWithRestResponse(chatThreadId, maxPageSize, skip).getValue();
        }

        public Page<ChatParticipant> getPage(String nextLink) {
             return serviceClient.listChatParticipantsNextWithRestResponse(nextLink).getValue();
        }
    }

    /**
     * Gets the participants of a thread.
     * 
     * @param chatThreadId Thread id to get participants for.
     * @param maxPageSize The maximum number of participants to be returned per page.
     * @param skip Skips participants up to a specified position in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the participants of a thread.
     */
    public PagedDataCollection<ChatParticipant, Page<ChatParticipant>> listChatParticipantsWithPage(String chatThreadId, Integer maxPageSize, Integer skip) {
        ListChatParticipantsWithPageRetriever retriever = new ListChatParticipantsWithPageRetriever(chatThreadId, maxPageSize, skip, this);
        return new PagedDataCollection<ChatParticipant, Page<ChatParticipant>>(retriever);
    }

    /**
     * Gets the participants of a thread.
     * 
     * @param chatThreadId Thread id to get participants for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the participants of a thread.
     */
    public Page<ChatParticipant> listChatParticipants(String chatThreadId) {
        final Integer maxPageSize = null;
        final Integer skip = null;
        return listChatParticipantsWithRestResponse(chatThreadId, maxPageSize, skip).getValue();
    }

    private static final class ListChatParticipantsPagesAsyncRetriever extends AsyncPagedDataRetriever<ChatParticipant, Page<ChatParticipant>> {
        private final String chatThreadId;

        private final Integer maxPageSize;

        private final Integer skip;

        private final ChatThreadsImpl serviceClient;

        public ListChatParticipantsPagesAsyncRetriever(String chatThreadId, Integer maxPageSize, Integer skip, ChatThreadsImpl serviceClient) {
            this.chatThreadId = chatThreadId;
            this.maxPageSize = maxPageSize;
            this.skip = skip;
            this.serviceClient = serviceClient;
        }

        public void getFirstPage(Callback<Page<ChatParticipant>> callback) {
            serviceClient.listChatParticipants(chatThreadId, maxPageSize, skip, callback);
        }

        public void getPage(String nextLink, Callback<Page<ChatParticipant>> callback) {
            serviceClient.listChatParticipantsNext(nextLink, callback);
        }
    }

    /**
     * Gets the participants of a thread.
     * 
     * @param chatThreadId Thread id to get participants for.
     * @param maxPageSize The maximum number of participants to be returned per page.
     * @param skip Skips participants up to a specified position in response.
     * @param callback the Callback that receives the response collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void listChatParticipantsPagesAsync(String chatThreadId, Integer maxPageSize, Integer skip, final Callback<AsyncPagedDataCollection<ChatParticipant, Page<ChatParticipant>>> callback) {
        ListChatParticipantsPagesAsyncRetriever retriever = new ListChatParticipantsPagesAsyncRetriever(chatThreadId, maxPageSize, skip, this);
        callback.onSuccess(new AsyncPagedDataCollection<ChatParticipant, Page<ChatParticipant>>(retriever), null);
    }

    /**
     * Remove a participant from a thread.
     * 
     * @param chatThreadId Thread id to remove the participant from.
     * @param chatParticipantId Id of the thread participant to remove from the thread.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void removeChatParticipant(String chatThreadId, String chatParticipantId, final Callback<Void> callback) {
        Call<ResponseBody> call = service.removeChatParticipant(chatThreadId, chatParticipantId, this.client.getApiVersion());
        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {
                if (response.isSuccessful()) {
                    if (response.code() == 204) {
                        final Void decodedResult;
                        try {
                            decodedResult = client.deserializeContent(response.headers(), response.body(), Void.class);
                        } catch(Exception ex) {
                            callback.onFailure(ex, response.raw());
                            return;
                        }
                        callback.onSuccess(decodedResult, response.raw());
                    } else {
                        final String strContent = client.readAsString(response.body());
                        callback.onFailure(new ErrorException(strContent, response.raw()), response.raw());
                    }
                } else {
                    final String strContent = client.readAsString(response.errorBody());
                    callback.onFailure(new HttpResponseException(strContent, response.raw()), response.raw());
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                callback.onFailure(t, null);
            }
        };
        call.enqueue(retrofitCallback);
    }

    /**
     * Remove a participant from a thread.
     * 
     * @param chatThreadId Thread id to remove the participant from.
     * @param chatParticipantId Id of the thread participant to remove from the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    public Response<Void> removeChatParticipantWithRestResponse(String chatThreadId, String chatParticipantId) {
        final retrofit2.Response<ResponseBody> response = this.client.executeRetrofitCall(service.removeChatParticipant(chatThreadId, chatParticipantId, this.client.getApiVersion()));
        if (response.isSuccessful()) {
            if (response.code() == 204) {
                return new Response<>(response.raw().request(),
                                        response.code(),
                                        response.headers(),
                                        this.client.deserializeContent(response.headers(), response.body(), Void.class));
            } else {
                final String strContent = this.client.readAsString(response.body());
                throw new ErrorException(strContent, response.raw());
            }
        } else {
            final String strContent = this.client.readAsString(response.errorBody());
            throw new HttpResponseException(strContent, response.raw());
        }
    }

    /**
     * Adds thread participants to a thread. If participants already exist, no change occurs.
     * 
     * @param chatThreadId Id of the thread to add participants to.
     * @param addChatParticipantsRequest Participants to be added to the thread.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void addChatParticipants(String chatThreadId, AddChatParticipantsRequest addChatParticipantsRequest, final Callback<AddChatParticipantsResult> callback) {
        final okhttp3.RequestBody okHttp3RequestBody;
        try {
            okHttp3RequestBody = RequestBody.create(okhttp3.MediaType.get("application/json"), client.serializerAdapter.serialize(addChatParticipantsRequest, client.resolveSerializerFormat("application/json")));
        } catch(java.io.IOException ioe) {
            callback.onFailure(new RuntimeException(ioe), null);
            return;
        }
        Call<ResponseBody> call = service.addChatParticipants(chatThreadId, this.client.getApiVersion(), okHttp3RequestBody);
        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {
                if (response.isSuccessful()) {
                    if (response.code() == 201) {
                        final AddChatParticipantsResult decodedResult;
                        try {
                            decodedResult = client.deserializeContent(response.headers(), response.body(), AddChatParticipantsResult.class);
                        } catch(Exception ex) {
                            callback.onFailure(ex, response.raw());
                            return;
                        }
                        callback.onSuccess(decodedResult, response.raw());
                    } else {
                        final String strContent = client.readAsString(response.body());
                        callback.onFailure(new ErrorException(strContent, response.raw()), response.raw());
                    }
                } else {
                    final String strContent = client.readAsString(response.errorBody());
                    callback.onFailure(new HttpResponseException(strContent, response.raw()), response.raw());
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                callback.onFailure(t, null);
            }
        };
        call.enqueue(retrofitCallback);
    }

    /**
     * Adds thread participants to a thread. If participants already exist, no change occurs.
     * 
     * @param chatThreadId Id of the thread to add participants to.
     * @param addChatParticipantsRequest Participants to be added to the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the add chat participants operation.
     */
    public Response<AddChatParticipantsResult> addChatParticipantsWithRestResponse(String chatThreadId, AddChatParticipantsRequest addChatParticipantsRequest) {
        final okhttp3.RequestBody okHttp3RequestBody;
        try {
            okHttp3RequestBody = RequestBody.create(okhttp3.MediaType.get("application/json"), this.client.serializerAdapter.serialize(addChatParticipantsRequest, this.client.resolveSerializerFormat("application/json")));
        } catch(java.io.IOException ioe) {
            throw new RuntimeException(ioe);
        }
        final retrofit2.Response<ResponseBody> response = this.client.executeRetrofitCall(service.addChatParticipants(chatThreadId, this.client.getApiVersion(), okHttp3RequestBody));
        if (response.isSuccessful()) {
            if (response.code() == 201) {
                return new Response<>(response.raw().request(),
                                        response.code(),
                                        response.headers(),
                                        this.client.deserializeContent(response.headers(), response.body(), AddChatParticipantsResult.class));
            } else {
                final String strContent = this.client.readAsString(response.body());
                throw new ErrorException(strContent, response.raw());
            }
        } else {
            final String strContent = this.client.readAsString(response.errorBody());
            throw new HttpResponseException(strContent, response.raw());
        }
    }

    /**
     * Updates a thread's properties.
     * 
     * @param chatThreadId The id of the thread to update.
     * @param updateChatThreadRequest Request payload for updating a chat thread.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void updateChatThread(String chatThreadId, UpdateChatThreadRequest updateChatThreadRequest, final Callback<Void> callback) {
        final okhttp3.RequestBody okHttp3RequestBody;
        try {
            okHttp3RequestBody = RequestBody.create(okhttp3.MediaType.get("application/merge-patch+json"), client.serializerAdapter.serialize(updateChatThreadRequest, client.resolveSerializerFormat("application/merge-patch+json")));
        } catch(java.io.IOException ioe) {
            callback.onFailure(new RuntimeException(ioe), null);
            return;
        }
        Call<ResponseBody> call = service.updateChatThread(chatThreadId, this.client.getApiVersion(), okHttp3RequestBody);
        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {
                if (response.isSuccessful()) {
                    if (response.code() == 204) {
                        final Void decodedResult;
                        try {
                            decodedResult = client.deserializeContent(response.headers(), response.body(), Void.class);
                        } catch(Exception ex) {
                            callback.onFailure(ex, response.raw());
                            return;
                        }
                        callback.onSuccess(decodedResult, response.raw());
                    } else {
                        final String strContent = client.readAsString(response.body());
                        callback.onFailure(new ErrorException(strContent, response.raw()), response.raw());
                    }
                } else {
                    final String strContent = client.readAsString(response.errorBody());
                    callback.onFailure(new HttpResponseException(strContent, response.raw()), response.raw());
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                callback.onFailure(t, null);
            }
        };
        call.enqueue(retrofitCallback);
    }

    /**
     * Updates a thread's properties.
     * 
     * @param chatThreadId The id of the thread to update.
     * @param updateChatThreadRequest Request payload for updating a chat thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    public Response<Void> updateChatThreadWithRestResponse(String chatThreadId, UpdateChatThreadRequest updateChatThreadRequest) {
        final okhttp3.RequestBody okHttp3RequestBody;
        try {
            okHttp3RequestBody = RequestBody.create(okhttp3.MediaType.get("application/merge-patch+json"), this.client.serializerAdapter.serialize(updateChatThreadRequest, this.client.resolveSerializerFormat("application/merge-patch+json")));
        } catch(java.io.IOException ioe) {
            throw new RuntimeException(ioe);
        }
        final retrofit2.Response<ResponseBody> response = this.client.executeRetrofitCall(service.updateChatThread(chatThreadId, this.client.getApiVersion(), okHttp3RequestBody));
        if (response.isSuccessful()) {
            if (response.code() == 204) {
                return new Response<>(response.raw().request(),
                                        response.code(),
                                        response.headers(),
                                        this.client.deserializeContent(response.headers(), response.body(), Void.class));
            } else {
                final String strContent = this.client.readAsString(response.body());
                throw new ErrorException(strContent, response.raw());
            }
        } else {
            final String strContent = this.client.readAsString(response.errorBody());
            throw new HttpResponseException(strContent, response.raw());
        }
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The nextLink parameter.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void listChatReadReceiptsNext(String nextLink, final Callback<Page<ChatMessageReadReceipt>> callback) {
        Call<ResponseBody> call = service.listChatReadReceiptsNext(nextLink);
        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {
                if (response.isSuccessful()) {
                    if (response.code() == 200) {
                        final ChatMessageReadReceiptsCollection decodedResult;
                        try {
                            decodedResult = client.deserializeContent(response.headers(), response.body(), ChatMessageReadReceiptsCollection.class);
                        } catch(Exception ex) {
                            callback.onFailure(ex, response.raw());
                            return;
                        }
                        callback.onSuccess(new Page<ChatMessageReadReceipt>(nextLink, decodedResult.getValue(), decodedResult.getNextLink()), response.raw());
                    } else {
                        final String strContent = client.readAsString(response.body());
                        callback.onFailure(new ErrorException(strContent, response.raw()), response.raw());
                    }
                } else {
                    final String strContent = client.readAsString(response.errorBody());
                    callback.onFailure(new HttpResponseException(strContent, response.raw()), response.raw());
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                callback.onFailure(t, null);
            }
        };
        call.enqueue(retrofitCallback);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged collection of chat message read receipts.
     */
    public Response<Page<ChatMessageReadReceipt>> listChatReadReceiptsNextWithRestResponse(String nextLink) {
        final retrofit2.Response<ResponseBody> response = this.client.executeRetrofitCall(service.listChatReadReceiptsNext(nextLink));
        if (response.isSuccessful()) {
            if (response.code() == 200) {
                final ChatMessageReadReceiptsCollection decodedResult;
                try {
                    decodedResult = this.client.deserializeContent(response.headers(), response.body(), ChatMessageReadReceiptsCollection.class);
                } catch(Exception ex) {
                    final String strContent = this.client.readAsString(response.body());
                    throw new ErrorException(strContent, response.raw());
                }
                return new Response<>(response.raw().request(),
                                        response.code(),
                                        response.headers(),
                                        new Page<ChatMessageReadReceipt>(nextLink, decodedResult.getValue(), decodedResult.getNextLink()));
            } else {
                final String strContent = this.client.readAsString(response.body());
                throw new ErrorException(strContent, response.raw());
            }
        } else {
            final String strContent = this.client.readAsString(response.errorBody());
            throw new HttpResponseException(strContent, response.raw());
        }
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The nextLink parameter.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void listChatMessagesNext(String nextLink, final Callback<Page<ChatMessage>> callback) {
        Call<ResponseBody> call = service.listChatMessagesNext(nextLink);
        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {
                if (response.isSuccessful()) {
                    if (response.code() == 200) {
                        final ChatMessagesCollection decodedResult;
                        try {
                            decodedResult = client.deserializeContent(response.headers(), response.body(), ChatMessagesCollection.class);
                        } catch(Exception ex) {
                            callback.onFailure(ex, response.raw());
                            return;
                        }
                        callback.onSuccess(new Page<ChatMessage>(nextLink, decodedResult.getValue(), decodedResult.getNextLink()), response.raw());
                    } else {
                        final String strContent = client.readAsString(response.body());
                        callback.onFailure(new ErrorException(strContent, response.raw()), response.raw());
                    }
                } else {
                    final String strContent = client.readAsString(response.errorBody());
                    callback.onFailure(new HttpResponseException(strContent, response.raw()), response.raw());
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                callback.onFailure(t, null);
            }
        };
        call.enqueue(retrofitCallback);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of chat messages for a particular chat thread.
     */
    public Response<Page<ChatMessage>> listChatMessagesNextWithRestResponse(String nextLink) {
        final retrofit2.Response<ResponseBody> response = this.client.executeRetrofitCall(service.listChatMessagesNext(nextLink));
        if (response.isSuccessful()) {
            if (response.code() == 200) {
                final ChatMessagesCollection decodedResult;
                try {
                    decodedResult = this.client.deserializeContent(response.headers(), response.body(), ChatMessagesCollection.class);
                } catch(Exception ex) {
                    final String strContent = this.client.readAsString(response.body());
                    throw new ErrorException(strContent, response.raw());
                }
                return new Response<>(response.raw().request(),
                                        response.code(),
                                        response.headers(),
                                        new Page<ChatMessage>(nextLink, decodedResult.getValue(), decodedResult.getNextLink()));
            } else {
                final String strContent = this.client.readAsString(response.body());
                throw new ErrorException(strContent, response.raw());
            }
        } else {
            final String strContent = this.client.readAsString(response.errorBody());
            throw new HttpResponseException(strContent, response.raw());
        }
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The nextLink parameter.
     * @param callback the Callback that receives the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void listChatParticipantsNext(String nextLink, final Callback<Page<ChatParticipant>> callback) {
        Call<ResponseBody> call = service.listChatParticipantsNext(nextLink);
        retrofit2.Callback<ResponseBody> retrofitCallback = new retrofit2.Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<okhttp3.ResponseBody> call, retrofit2.Response<ResponseBody> response) {
                if (response.isSuccessful()) {
                    if (response.code() == 200) {
                        final ChatParticipantsCollection decodedResult;
                        try {
                            decodedResult = client.deserializeContent(response.headers(), response.body(), ChatParticipantsCollection.class);
                        } catch(Exception ex) {
                            callback.onFailure(ex, response.raw());
                            return;
                        }
                        callback.onSuccess(new Page<ChatParticipant>(nextLink, decodedResult.getValue(), decodedResult.getNextLink()), response.raw());
                    } else {
                        final String strContent = client.readAsString(response.body());
                        callback.onFailure(new ErrorException(strContent, response.raw()), response.raw());
                    }
                } else {
                    final String strContent = client.readAsString(response.errorBody());
                    callback.onFailure(new HttpResponseException(strContent, response.raw()), response.raw());
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                callback.onFailure(t, null);
            }
        };
        call.enqueue(retrofitCallback);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of participants belong to a particular thread.
     */
    public Response<Page<ChatParticipant>> listChatParticipantsNextWithRestResponse(String nextLink) {
        final retrofit2.Response<ResponseBody> response = this.client.executeRetrofitCall(service.listChatParticipantsNext(nextLink));
        if (response.isSuccessful()) {
            if (response.code() == 200) {
                final ChatParticipantsCollection decodedResult;
                try {
                    decodedResult = this.client.deserializeContent(response.headers(), response.body(), ChatParticipantsCollection.class);
                } catch(Exception ex) {
                    final String strContent = this.client.readAsString(response.body());
                    throw new ErrorException(strContent, response.raw());
                }
                return new Response<>(response.raw().request(),
                                        response.code(),
                                        response.headers(),
                                        new Page<ChatParticipant>(nextLink, decodedResult.getValue(), decodedResult.getNextLink()));
            } else {
                final String strContent = this.client.readAsString(response.body());
                throw new ErrorException(strContent, response.raw());
            }
        } else {
            final String strContent = this.client.readAsString(response.errorBody());
            throw new HttpResponseException(strContent, response.raw());
        }
    }
}
