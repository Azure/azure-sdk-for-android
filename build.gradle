// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        google()
        jcenter()
    }

    ext {
        androidToolsGradleVersion = "3.5.2"
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$androidToolsGradleVersion"
        // NOTE: Do not place your application dependencies here; they belong in the individual module build.gradle
        // files
    }
}

configure([
    project("sdk:core:azure-core"),
    project("sdk:storage:azure-storage-blob")]) {

    apply plugin: "com.android.library"
    apply plugin: "maven"
    apply plugin: "maven-publish"


    android { -> project
        compileSdkVersion 29
        buildToolsVersion "29.0.2"

        defaultConfig {
            minSdkVersion 21
            targetSdkVersion 29
            versionCode 1
            versionName "1.0.0-beta.1"
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        lintOptions {
            lintConfig file("$rootDir/eng/lint.xml")
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            }

            debug {
                debuggable true
            }
        }

        testOptions {
            unitTests {
                includeAndroidResources = true
            }
        }

    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = "sources"
    }

    task javadoc(type: Javadoc) {
        failOnError false
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    project.afterEvaluate {
        javadoc.classpath += files(android.libraryVariants.collect { variant ->
            variant.javaCompile.classpath.files
        })

        publishing { -> project
            publications {
                maven(MavenPublication) { -> project
                    artifact bundleReleaseAar
                    artifact sourcesJar
                    artifact javadocJar

                    pom {
                        name = "Azure SDK for Android" // TODO: Need to pull this from the project being built.
                        description = project.description
                        url = 'https://github.com/Azure/azure-sdk-for-android'
                        licenses {
                            license {
                                name = 'The MIT License (MIT)'
                                url = 'http://opensource.org/licenses/MIT'
                            }
                        }
                        developers {
                            developer {
                                id = 'microsoft'
                                name = 'Microsoft'
                            }
                        }
                        scm {
                            connection = 'scm:git:https://github.com/Azure/azure-sdk-for-android.git'
                            developerConnection = 'scm:git:https://github.com/Azure/azure-sdk-for-android.git'
                            url = 'https://github.com/Azure/azure-sdk-for-android'
                        }
                    }
                }
            }

            repositories {
                maven {
                    url = "$buildDir/repo/"
                }
            }
        }
    }

}

allprojects {
    repositories {
        google()
        jcenter()
    }

    ext {
        annotationsVersion = "1.1.0"
        jacksonDatabindVersion = "2.9.9"
        jacksonDataFormatXmlVersion = "2.9.9"
        jUnitVersion = "4.12"
        mockWebServerVersion = "3.13.1"
        okHttpVersion = "3.13.1"
        retrofitVersion = "2.6.2"
        staxApiVersion = "1.0-2"
        threeTenAbpVersion = "1.2.1"
        workRuntimeVersion = "2.3.1"
        concurrentFuturesVersion = "1.0.0"
        roomRuntimeVersion = "2.2.3"
        roomCompilerVersion = "2.2.3"
    }
}

// Why do we need this?
// task clean(type: Delete) {
//     delete rootProject.buildDir
// }

// Synthesize dependencies for service-level projects so that running a task on a service-level project automatically
// runs it on all subprojects of that project
configure(subprojects.findAll { it.path.startsWith(':sdk:') && it.path.count(':') == 2 }) {
    project.gradle.startParameter.taskNames.each { task ->
        task = task.split(':').last()

        tasks.create(task) {
            subprojects.each { dependsOn("$it.name:$task") }
        }
    }
}

