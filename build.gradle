// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        google()
        jcenter()
    }

    ext {
        androidBuildToolsVersion = "30.0.1"
        androidGradlePluginVersion = "4.0.1"
        androidJunitJacocoGradlePluginVersion = "0.16.0"
        jacocoVersion = "0.8.5"
        kotlinGradlePluginVersion = "1.4.20"
        dokkaGradlePluginVersion = "1.4.20"
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$androidGradlePluginVersion"
        classpath "com.vanniktech:gradle-android-junit-jacoco-plugin:$androidJunitJacocoGradlePluginVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinGradlePluginVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaGradlePluginVersion"
    }
}

apply plugin: "org.jetbrains.dokka"
apply plugin: "com.vanniktech.android.junit.jacoco"

// Configure all client library projects with the standard Android build / publish template
configure(subprojects.findAll { it.path.startsWith(':sdk:') && it.path.count(':') == 3 }) {
    apply plugin: "com.android.library"
    apply plugin: "kotlin-android"
    apply plugin: "org.jetbrains.dokka"
    apply plugin: "maven-publish"

    group = "com.azure.android"

    android {
        compileSdkVersion 30
        buildToolsVersion "$androidBuildToolsVersion"

        defaultConfig {
            minSdkVersion 21
            targetSdkVersion 30
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        lintOptions {
            lintConfig file("$rootDir/eng/lint.xml")
            htmlReport true
            textReport true
            textOutput 'stdout'
            explainIssues false
            abortOnError true
        }

        packagingOptions {
            exclude 'META-INF/DEPENDENCIES'
            exclude 'META-INF/LICENSE'
            exclude 'META-INF/LICENSE.md'
            exclude 'META-INF/license'
            exclude 'META-INF/NOTICE'
            exclude 'META-INF/NOTICE.md'
            exclude 'META-INF/notice'
            exclude 'META-INF/ASL2.0'
            exclude("META-INF/*.md")
            exclude("META-INF/*.txt")
            exclude("META-INF/*.kotlin_module")
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            }

            debug {
                debuggable true
            }
        }

        testOptions {
            unitTests {
                includeAndroidResources = true
                unitTests.returnDefaultValues = true
            }
        }
    }

    dependencies {
        dokkaHtmlPlugin("org.jetbrains.dokka:kotlin-as-java-plugin:$dokkaGradlePluginVersion")
    }

    tasks.withType(org.jetbrains.dokka.gradle.DokkaTask) {
        dokkaSourceSets {
            configureEach {
                platform.set(org.jetbrains.dokka.Platform.jvm)
                displayName.set("Java")
            }
            named("main") {
                includeNonPublic.set(false)
                skipDeprecated.set(false)
                reportUndocumented.set(true)
                skipEmptyPackages.set(true)
                jdkVersion.set(8)
                noStdlibLink.set(false)
                noJdkLink.set(false)
                noAndroidSdkLink.set(false)
                includes.setFrom(files("module.md"))
                perPackageOption {
                    matchingRegex.set(".+\\.internal(\\..+)?")
                    suppress.set(true)
                }
                perPackageOption {
                    matchingRegex.set(".+\\.implementation(\\..+)?")
                    suppress.set(true)
                }
                sourceLink {
                    localDirectory.set(file("src/main/java"))
                    remoteUrl.set(new URL("https://github.com/Azure/azure-sdk-for-android/tree/master" + it.project.path.replace(":", "/") + "/src/main/java"))
                    remoteLineSuffix.set("#L")
                }
                externalDocumentationLink {
                    url.set(new URL("https://square.github.io/okhttp/3.x/okhttp/"))
                    packageListUrl.set(new URL("https://square.github.io/okhttp/3.x/okhttp/package-list"))
                }
                externalDocumentationLink {
                    url.set(new URL("https://developer.android.com/reference/"))
                    packageListUrl.set(new URL("https://developer.android.com/reference/package-list"))
                }
                externalDocumentationLink {
                    url.set(new URL("https://developer.android.com/reference/"))
                    packageListUrl.set(new URL("https://developer.android.com/reference/androidx/package-list"))
                }
                externalDocumentationLink {
                    url.set(new URL("https://javadoc.io/doc/com.jakewharton.threetenabp/threetenabp/$threeTenAbpVersion/"))
                    packageListUrl.set(new URL("https://javadoc.io/doc/com.jakewharton.threetenabp/threetenabp/$threeTenAbpVersion/package-list"))
                }
                externalDocumentationLink {
                    url.set(new URL("https://javadoc.io/doc/org.threeten/threetenbp/$threeTenBpVersion/"))
                    packageListUrl.set(new URL("https://javadoc.io/doc/org.threeten/threetenbp/1.3.6/package-list"))
                }
                externalDocumentationLink {
                    url.set(new URL("https://azure.github.io/azure-sdk-for-android/sdk/core/azure-core/azure-core/"))
                    packageListUrl.set(new URL("https://azure.github.io/azure-sdk-for-android/sdk/core/azure-core/azure-core/package-list"))
                }
            }
        }

        pluginsMapConfiguration.set(["org.jetbrains.dokka.base.DokkaBase" : """{ "customAssets" : ["${file("$rootDir/eng/docs/assets/docs_logo.svg")}"] }"""])
    }

    junitJacoco {
        jacocoVersion = "$jacocoVersion"
    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        archiveClassifier.set("sources")
    }

    task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
        from dokkaJavadoc.outputDirectory
        archiveClassifier.set("javadoc")
    }

    project.afterEvaluate {
        publishing {
            publications {
                release(MavenPublication) { -> project
                    from components.release

                    artifact sourcesJar
                    artifact javadocJar

                    pom {
                        name = project.publishName
                        description = project.description
                        url = 'https://github.com/Azure/azure-sdk-for-android'
                        licenses {
                            license {
                                name = 'The MIT License (MIT)'
                                url = 'http://opensource.org/licenses/MIT'
                            }
                        }
                        developers {
                            developer {
                                id = 'microsoft'
                                name = 'Microsoft'
                            }
                        }
                        scm {
                            connection = 'scm:git:https://github.com/Azure/azure-sdk-for-android.git'
                            developerConnection = 'scm:git:https://github.com/Azure/azure-sdk-for-android.git'
                            url = 'https://github.com/Azure/azure-sdk-for-android'
                        }
                    }
                }
            }

            repositories {
                maven {
                    url = "$buildDir/repo/"
                }
            }
        }
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven {
            url 'https://trouterpublicpackages.z13.web.core.windows.net'
        }
    }

    ext {
        annotationsVersion = "1.1.0"
        appCompatVersion = "1.2.0"
        archCoreTestVersion = "2.1.0"
        concurrentFuturesVersion = "1.0.0"
        jUnitVersion = "4.13"
        jacksonVersion = "2.11.2"
        lifecycleVersion = "2.2.0"
        okHttpVersion = "3.14.9"
        retrofitVersion = "2.9.0"
        roomVersion = "2.2.5"
        staxApiVersion = "1.0-2"
        threeTenAbpVersion = "1.2.4"
        threeTenBpVersion = "1.4.4"
        workVersion = "2.4.0"
        dataproviderVersion =  "2.6"
    }
}

// Synthesize dependencies for service-level projects so that running a task on a service-level project automatically
// runs it on all sub-projects of that project
configure(subprojects.findAll { it.path.startsWith(':sdk:') && it.path.count(':') == 2 }) {
    apply plugin: "org.gradle.help-tasks"
    def setupTasks = ["init", "wrapper"]

    project.gradle.startParameter.taskNames.each { task ->
        task = task.split(':').last()
        if (!task.startsWith("-") && !task.startsWith("dokka") && !setupTasks.contains(task) && tasks.findByPath(task) == null) {
            tasks.create(task) {
                subprojects.each { dependsOn("$it.name:$task") }
            }
        }
    }
}
