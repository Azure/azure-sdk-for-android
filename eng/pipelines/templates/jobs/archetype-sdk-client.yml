parameters:
  ServiceDirectory: not-specified # Set a default that breaks in obvious ways.
  Artifacts: []

jobs:
  - job: 'Build'

    variables:
      - template: /eng/pipelines/templates/variables/globals.yml

    pool:
      name: $(Pool)
      vmImage: $(OSVmImage)

    steps:
      - task: Gradle@2
        inputs:
          tasks: 'sdk:${{parameters.ServiceDirectory}}:publish'
          jdkVersion: $(JavaBuildVersion)
        displayName: Build and publish

      - ${{ each artifact in parameters.Artifacts }}:
        - pwsh: |
            $artifactsToStage = Get-ChildItem sdk/${{parameters.ServiceDirectory}}/${{artifact.name}}/build/repo/**/${{artifact.name}}* -Recurse | Where-Object -FilterScript { $_.Name -match "(jar|pom|aar|module)$" }
            $stagingLocation = New-Item -Type Directory -Path $(Build.ArtifactStagingDirectory) -Name ${{artifact.safeName}}
            $artifactsToStage | Copy-Item -Destination $stagingLocation
          displayName: Stage ${{artifact.name}} for upload

      - publish: $(Build.ArtifactStagingDirectory)
        artifact: packages
        displayName: Publish packages

      - ${{if eq(variables['System.TeamProject'], 'internal') }}:
        - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
          displayName: 'Generate BOM'
          condition: succeededOrFailed()
          inputs:
            BuildDropPath: $(Build.ArtifactStagingDirectory)

        - template: /eng/common/pipelines/templates/steps/publish-artifact.yml
          parameters:
            ArtifactPath: '$(Build.ArtifactStagingDirectory)/_manifest'
            ArtifactName: 'manifest'

  - job: 'Analyze'

    variables:
      - template: /eng/pipelines/templates/variables/globals.yml

    pool:
      name: $(Pool)
      vmImage: $(OSVmImage)

    steps:
      - template: /eng/common/pipelines/templates/steps/check-spelling.yml

      - template: /eng/common/pipelines/templates/steps/verify-links.yml
        parameters:
          Directory: ''
          CheckLinkGuidance: $true

      - task: Gradle@2
        inputs:
          tasks: 'sdk:${{parameters.ServiceDirectory}}:check'
          jdkVersion: $(JavaBuildVersion)
        displayName: Run code quality tools (lint, checkstyle and spotbug)

      - task: Gradle@2
        inputs:
          tasks: 'sdk:${{parameters.ServiceDirectory}}:assembleDebug'
          jdkVersion: $(JavaBuildVersion)
          publishJUnitResults: false
          checkStyleRunAnalysis: true
          findBugsRunAnalysis: false
          pmdRunAnalysis: true
        displayName: Build and analyze

      - ${{ each artifact in parameters.Artifacts }}:
        - script: |
            mkdir -p $(Build.ArtifactStagingDirectory)/lint
            mkdir -p $(Build.ArtifactStagingDirectory)/checkstyle
            mkdir -p $(Build.ArtifactStagingDirectory)/spotbugs
            cp sdk/${{parameters.ServiceDirectory}}/${{artifact.name}}/build/reports/lint-results.html \
               $(Build.ArtifactStagingDirectory)/lint/${{artifact.name}}-lint-results.html
            cp sdk/${{parameters.ServiceDirectory}}/${{artifact.name}}/build/reports/checkstyle/checkstyle.html \
               $(Build.ArtifactStagingDirectory)/checkstyle/${{artifact.name}}-checkstyle.html
            cp sdk/${{parameters.ServiceDirectory}}/${{artifact.name}}/build/spotbugs/debug.xml \
               $(Build.ArtifactStagingDirectory)/spotbugs/${{artifact.name}}-spotbugs-debug.xml
          displayName: Stage reports for ${{artifact.name}}

      - publish: $(Build.ArtifactStagingDirectory)
        artifact: reports
        displayName: Publish reports

      - template: /eng/common/pipelines/templates/steps/eng-common-workflow-enforcer.yml

  - job: 'UnitTest'

    variables:
      - template: /eng/pipelines/templates/variables/globals.yml

    pool:
      name: $(Pool)
      vmImage: $(OSVmImage)

    steps:
      - template: /eng/common/pipelines/templates/steps/verify-agent-os.yml
        parameters:
          AgentImage: $(OSVmImage)

      - task: Gradle@2
        inputs:
          tasks: 'sdk:${{parameters.ServiceDirectory}}:jacocoTestReportDebug'
          jdkVersion: $(JavaTestVersion)
          publishJUnitResults: true
        displayName: Build and test

      - ${{ each artifact in parameters.Artifacts }}:
        - task: PublishCodeCoverageResults@1
          inputs:
            codeCoverageTool: 'JaCoCo'
            summaryFileLocation: 'sdk/${{parameters.ServiceDirectory}}/${{artifact.name}}/build/reports/jacoco/debug/jacoco.xml'
            pathToSources: 'sdk/${{parameters.ServiceDirectory}}/${{artifact.name}}/src/main/java/'
          displayName: Publish code coverage for ${{artifact.name}}
